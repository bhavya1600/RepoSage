{
  "repository": {
    "name": "RepoSage",
    "description": "A tool to help understand Github repositories, file by file with Call Hierarchy and Summary of the project.",
    "language": "JavaScript"
  },
  "fileMetadata": [
    {
      "path": "backend/src/analyzer.js",
      "metadata": "{\n  \"name\": \"analyzer.js\",\n  \"path\": \"backend/src/analyzer.js\",\n  \"imports\": [\n    \"Octokit from 'octokit'\",\n    \"OpenAI from 'openai'\",\n    \"parseGitHubUrl from './utils/github.js'\",\n    \"buildFileTree from './utils/fileTree.js'\",\n    \"chalk from 'chalk'\",\n    \"fs from 'fs'\",\n    \"path from 'path'\",\n    \"fileURLToPath from 'url'\",\n    \"dirname from 'path'\",\n    \"resolve from 'path'\"\n  ],\n  \"mainPurpose\": \"Analyze a GitHub repository by fetching its metadata and file structure, and generating insights using OpenAI's API.\",\n  \"type\": \"module\",\n  \"functions\": [\n    {\n      \"name\": \"createChatCompletion\",\n      \"purpose\": \"Creates a chat completion using OpenAI's API based on the provided model and prompt.\",\n      \"input\": \"openai (OpenAI instance), model (string), modelType (string), analysisPrompt (string)\",\n      \"output\": \"Promise resolving to the API response\"\n    },\n    {\n      \"name\": \"saveApiCallContent\",\n      \"purpose\": \"Saves the content of an API call to a text file.\",\n      \"input\": \"functionName (string), content (string)\",\n      \"output\": \"Promise resolving to undefined\"\n    },\n    {\n      \"name\": \"analyzeRepository\",\n      \"purpose\": \"Main function to analyze a repository by fetching metadata, file tree, and generating analysis.\",\n      \"input\": \"repoUrl (string)\",\n      \"output\": \"Promise resolving to an analysis object\"\n    },\n    {\n      \"name\": \"analyzeProjectStructure\",\n      \"purpose\": \"Analyzes the project structure using OpenAI's API based on repository metadata and README content.\",\n      \"input\": \"openai (OpenAI instance), repoData (object), files (array), readmeContent (string)\",\n      \"output\": \"Promise resolving to a string summary of the project structure\"\n    },\n    {\n      \"name\": \"smartFileFilter\",\n      \"purpose\": \"Filters files to identify essential files for analysis based on project understanding.\",\n      \"input\": \"files (array), projectUnderstanding (string)\",\n      \"output\": \"Promise resolving to an array of filtered files\"\n    },\n    {\n      \"name\": \"summarizeContent\",\n      \"purpose\": \"Generates a summary of the content of a file using OpenAI's API.\",\n      \"input\": \"openai (OpenAI instance), content (string), fileTree (array)\",\n      \"output\": \"Promise resolving to a summary string\"\n    },\n    {\n      \"name\": \"analyzeCode\",\n      \"purpose\": \"Analyzes a code file and provides a human-readable explanation and JSON metadata.\",\n      \"input\": \"openai (OpenAI instance), filePath (string), content (string), fileTree (array)\",\n      \"output\": \"Promise resolving to an object containing text analysis and JSON metadata\"\n    },\n    {\n      \"name\": \"analyzeCallHierarchy\",\n      \"purpose\": \"Generates a call hierarchy based on project understanding and file metadata.\",\n      \"input\": \"openai (OpenAI instance), fileMetadata (array), projectUnderstanding (string)\",\n      \"output\": \"Promise resolving to a string representation of the call hierarchy\"\n    },\n    {\n      \"name\": \"generateSummary\",\n      \"purpose\": \"Generates a summary of the project based on various analysis data.\",\n      \"input\": \"openai (OpenAI instance), analysis (object)\",\n      \"output\": \"Promise resolving to a summary string\"\n    }\n  ],\n  \"exports\": [\n    \"analyzeRepository\"\n  ],\n  \"dependencies\": [\n    \"octokit\",\n    \"openai\",\n    \"chalk\",\n    \"fs\",\n    \"path\"\n  ],\n  \"finalReturnType(s)\": \"Promise resolving to an analysis object containing repository metadata, file tree, project understanding, file analysis, file metadata, summary, and call hierarchy.\"\n}"
    },
    {
      "path": "backend/src/utils/file.js",
      "metadata": "{\n  \"name\": \"file.js\",\n  \"path\": \"backend/src/utils/file.js\",\n  \"imports\": [\n    {\n      \"module\": \"fs/promises\",\n      \"imported\": [\n        \"writeFile\"\n      ]\n    }\n  ],\n  \"mainPurpose\": \"To save analysis results to a markdown file and corresponding JSON metadata.\",\n  \"type\": \"JavaScript\",\n  \"functions\": [\n    {\n      \"name\": \"saveToFile\",\n      \"purpose\": \"Saves the analysis results to a markdown file and a JSON file.\",\n      \"input\": \"filename (string), analysis (object)\",\n      \"output\": \"Promise<void>\"\n    },\n    {\n      \"name\": \"formatFileTree\",\n      \"purpose\": \"Formats the file tree structure for display in markdown.\",\n      \"input\": \"node (object), indent (string), repoUrl (string), branch (string), parentPath (string)\",\n      \"output\": \"string\"\n    },\n    {\n      \"name\": \"getFullPath\",\n      \"purpose\": \"Retrieves the full path of a file or directory node.\",\n      \"input\": \"node (object)\",\n      \"output\": \"string\"\n    }\n  ],\n  \"exports\": [\n    \"saveToFile\"\n  ],\n  \"dependencies\": [\n    \"fs/promises\"\n  ],\n  \"finalReturnType(s)\": \"Promise<void>\"\n}"
    },
    {
      "path": "backend/src/utils/fileTree.js",
      "metadata": "{\n  \"name\": \"fileTree.js\",\n  \"path\": \"backend/src/utils/fileTree.js\",\n  \"imports\": [],\n  \"mainPurpose\": \"Builds a hierarchical representation of a file tree from a list of files.\",\n  \"type\": \"JavaScript module\",\n  \"functions\": [\n    {\n      \"name\": \"buildFileTree\",\n      \"purpose\": \"Constructs a file tree structure from an array of file objects.\",\n      \"input\": \"Array of file objects, each with a 'path' and 'type'.\",\n      \"output\": \"A nested object representing the file tree.\"\n    },\n    {\n      \"name\": \"sortFileTree\",\n      \"purpose\": \"Sorts the children of a file tree node by type and name.\",\n      \"input\": \"A file tree node.\",\n      \"output\": \"A sorted file tree node.\"\n    }\n  ],\n  \"exports\": [\n    \"buildFileTree\"\n  ],\n  \"dependencies\": [],\n  \"finalReturnType(s)\": \"Object representing the sorted file tree.\"\n}"
    },
    {
      "path": "backend/src/utils/github.js",
      "metadata": "{\n  \"name\": \"github.js\",\n  \"path\": \"backend/src/utils/github.js\",\n  \"imports\": [],\n  \"mainPurpose\": \"To parse a GitHub repository URL and extract the owner and repository name.\",\n  \"type\": \"module\",\n  \"functions\": [\n    {\n      \"name\": \"parseGitHubUrl\",\n      \"purpose\": \"Extracts the owner and repository name from a given GitHub URL.\",\n      \"input\": \"A string representing a GitHub repository URL.\",\n      \"output\": \"An object containing the owner and repository name.\"\n    }\n  ],\n  \"exports\": [\n    \"parseGitHubUrl\"\n  ],\n  \"dependencies\": [],\n  \"finalReturnType(s)\": \"Object\"\n}"
    },
    {
      "path": "frontend/src/App.jsx",
      "metadata": "{\n  \"name\": \"App\",\n  \"path\": \"frontend/src/App.jsx\",\n  \"imports\": [\n    \"useState from 'react'\",\n    \"'./App.css'\"\n  ],\n  \"mainPurpose\": \"To provide a user interface for analyzing GitHub repositories and downloading analysis results.\",\n  \"type\": \"Functional Component\",\n  \"functions\": [\n    {\n      \"name\": \"handleSubmit\",\n      \"purpose\": \"Handles the form submission to analyze the GitHub repository.\",\n      \"input\": \"Event object from the form submission.\",\n      \"output\": \"Updates state variables and logs based on the analysis response.\"\n    },\n    {\n      \"name\": \"handleDownload\",\n      \"purpose\": \"Handles the download of the analysis results.\",\n      \"input\": \"None\",\n      \"output\": \"Triggers a download of the analysis results file.\"\n    }\n  ],\n  \"exports\": [\n    \"App\"\n  ],\n  \"dependencies\": [\n    \"useState\"\n  ],\n  \"finalReturnType(s)\": \"JSX element representing the application UI.\"\n}"
    },
    {
      "path": "frontend/src/main.jsx",
      "metadata": "{\n  \"name\": \"main.jsx\",\n  \"path\": \"frontend/src/main.jsx\",\n  \"imports\": [\n    \"StrictMode from 'react'\",\n    \"createRoot from 'react-dom/client'\",\n    \"'./index.css'\",\n    \"App from './App.jsx'\"\n  ],\n  \"mainPurpose\": \"Entry point for the React application, rendering the main App component within a StrictMode wrapper.\",\n  \"type\": \"JavaScript\",\n  \"functions\": [],\n  \"exports\": [],\n  \"dependencies\": [\n    \"react\",\n    \"react-dom\"\n  ],\n  \"finalReturnType(s)\": \"React element\"\n}"
    },
    {
      "path": "frontend/vite.config.js",
      "metadata": "{\n  \"name\": \"vite.config.js\",\n  \"path\": \"frontend/vite.config.js\",\n  \"imports\": [\n    {\n      \"module\": \"vite\",\n      \"imported\": \"defineConfig\"\n    },\n    {\n      \"module\": \"@vitejs/plugin-react\",\n      \"imported\": \"react\"\n    }\n  ],\n  \"mainPurpose\": \"Configuration file for Vite, setting up the build process for a React application.\",\n  \"type\": \"configuration\",\n  \"functions\": [],\n  \"exports\": [\n    \"default\"\n  ],\n  \"dependencies\": [\n    \"vite\",\n    \"@vitejs/plugin-react\"\n  ],\n  \"finalReturnType(s)\": \"Object\"\n}"
    }
  ],
  "callHierarchy": "```\nüìÅ analyzeRepository(repoUrl: string) ‚Üí Promise<object> [backend/src/analyzer.js]\n‚îú‚îÄ üî∑ parseGitHubUrl(url: string) ‚Üí object [backend/src/utils/github.js]\n‚îú‚îÄ üî∑ buildFileTree(files: array) ‚Üí object [backend/src/utils/fileTree.js]\n‚îÇ  ‚îú‚îÄ üü£ sortFileTree(node: object) ‚Üí object [backend/src/utils/fileTree.js]\n‚îÇ  ‚îî‚îÄ üü† formatFileTree(node: object, indent: string, repoUrl: string, branch: string, parentPath: string) ‚Üí string [backend/src/utils/file.js]\n‚îú‚îÄ üî∑ analyzeProjectStructure(openai: OpenAI, repoData: object, files: array, readmeContent: string) ‚Üí Promise<string> [backend/src/analyzer.js]\n‚îú‚îÄ üî∑ smartFileFilter(files: array, projectUnderstanding: string) ‚Üí Promise<array> [backend/src/analyzer.js]\n‚îú‚îÄ üî∑ summarizeContent(openai: OpenAI, content: string, fileTree: array) ‚Üí Promise<string> [backend/src/analyzer.js]\n‚îú‚îÄ üî∑ analyzeCode(openai: OpenAI, filePath: string, content: string, fileTree: array) ‚Üí Promise<object> [backend/src/analyzer.js]\n‚îú‚îÄ üî∑ createChatCompletion(openai: OpenAI, model: string, modelType: string, analysisPrompt: string) ‚Üí Promise<object> [backend/src/analyzer.js]\n‚îî‚îÄ üî∂ saveToFile(filename: string, analysis: object) ‚Üí Promise<void> [backend/src/utils/file.js]\n```"
}