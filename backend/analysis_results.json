{
  "repository": {
    "name": "RepoSage",
    "description": "A tool to help understand Github repositories, file by file with Call Hierarchy and Summary of the project.",
    "language": "JavaScript"
  },
  "fileMetadata": [
    {
      "path": "backend/src/analyzer.js",
      "metadata": "Here is the JSON structure containing essential technical information about `backend/src/analyzer.js`:\n\n```json\n{\n  \"name\": \"analyzer.js\",\n  \"path\": \"backend/src/analyzer.js\",\n  \"imports\": [\n    \"octokit\",\n    \"openai\",\n    \"chalk\",\n    \"fs\",\n    \"path\",\n    \"fileURLToPath\",\n    \"dirname\",\n    \"resolve\",\n    \"./utils/github.js\",\n    \"./utils/fileTree.js\"\n  ],\n  \"mainPurpose\": \"This module analyzes a GitHub repository by fetching its metadata, file tree, and relevant files, then processes the data using OpenAI models to generate insights, summaries, and call hierarchies.\",\n  \"type\": \"Backend utility module\",\n  \"functions\": [\n    {\n      \"name\": \"createChatCompletion\",\n      \"purpose\": \"Creates a chat completion request to OpenAI based on the provided model type and analysis prompt.\",\n      \"input\": \"openai (OpenAI client), model (string), modelType (string), analysisPrompt (string)\",\n      \"output\": \"OpenAI API response containing the generated text\"\n    },\n    {\n      \"name\": \"saveApiCallContent\",\n      \"purpose\": \"Saves API call responses to a log file for debugging and reference.\",\n      \"input\": \"functionName (string), content (string)\",\n      \"output\": \"Writes content to 'apiResponsesLog.txt'\"\n    },\n    {\n      \"name\": \"analyzeRepository\",\n      \"purpose\": \"Fetches repository metadata, file tree, and relevant files, then analyzes them using OpenAI models to generate insights.\",\n      \"input\": \"repoUrl (string)\",\n      \"output\": \"An object containing repository metadata, file tree, project understanding, file analysis, and call hierarchy\"\n    },\n    {\n      \"name\": \"analyzeProjectStructure\",\n      \"purpose\": \"Analyzes the repository structure and provides an understanding of the project based on its file organization and README content.\",\n      \"input\": \"openai (OpenAI client), repoData (object), files (array), readmeContent (string)\",\n      \"output\": \"String containing project understanding summary\"\n    },\n    {\n      \"name\": \"smartFileFilter\",\n      \"purpose\": \"Filters the repository files to determine which ones are essential for analysis.\",\n      \"input\": \"files (array), projectUnderstanding (string)\",\n      \"output\": \"Array of file objects that are considered essential\"\n    },\n    {\n      \"name\": \"summarizeContent\",\n      \"purpose\": \"Summarizes the content of a given file using OpenAI.\",\n      \"input\": \"openai (OpenAI client), content (string), fileTree (array)\",\n      \"output\": \"String containing summarized content\"\n    },\n    {\n      \"name\": \"analyzeCode\",\n      \"purpose\": \"Analyzes a given code file and generates both a human-readable explanation and structured JSON metadata.\",\n      \"input\": \"openai (OpenAI client), filePath (string), content (string), fileTree (array)\",\n      \"output\": \"Object containing text analysis and JSON metadata\"\n    },\n    {\n      \"name\": \"analyzeCallHierarchy\",\n      \"purpose\": \"Generates a call hierarchy for the project based on file metadata and project understanding.\",\n      \"input\": \"openai (OpenAI client), fileMetadata (array), projectUnderstanding (string)\",\n      \"output\": \"String containing a structured call hierarchy\"\n    },\n    {\n      \"name\": \"generateSummary\",\n      \"purpose\": \"Generates a high-level summary of the project based on its metadata, file structure, and analysis results.\",\n      \"input\": \"openai (OpenAI client), analysis (object)\",\n      \"output\": \"String containing the project summary\"\n    }\n  ],\n  \"exports\": [\n    \"analyzeRepository\"\n  ],\n  \"dependencies\": [\n    \"octokit\",\n    \"openai\",\n    \"chalk\",\n    \"fs\",\n    \"path\"\n  ],\n  \"finalReturnType(s)\": \"Object containing repository analysis, file metadata, call hierarchy, and project summary\"\n}\n```\n\n### Summary:\n- The module is responsible for analyzing a GitHub repository.\n- It fetches metadata, file trees, and relevant files.\n- Uses OpenAI to generate insights, summaries, and call hierarchies.\n- Contains multiple helper functions for API calls, file filtering, and content summarization.\n- Exports `analyzeRepository` as the main function.\n\nThis JSON provides a structured technical breakdown of the `analyzer.js` file. ðŸš€"
    },
    {
      "path": "backend/src/index.js",
      "metadata": "{\n  \"name\": \"index.js\",\n  \"path\": \"backend/src/index.js\",\n  \"imports\": [\n    \"express\",\n    \"cors\",\n    \"dotenv\",\n    \"./analyzer.js\",\n    \"./utils/display.js\",\n    \"./utils/file.js\",\n    \"fs/promises\",\n    \"path\",\n    \"url\"\n  ],\n  \"mainPurpose\": \"Sets up an Express server to analyze GitHub repositories and serve analysis results.\",\n  \"type\": \"Express server entry point\",\n  \"functions\": [\n    {\n      \"name\": \"stripAnsiCodes\",\n      \"purpose\": \"Removes ANSI color codes from a string.\",\n      \"input\": \"string (str)\",\n      \"output\": \"string\"\n    },\n    {\n      \"name\": \"GET /api/download-analysis\",\n      \"purpose\": \"Serves the analysis results file as a downloadable markdown file.\",\n      \"input\": \"HTTP request\",\n      \"output\": \"Markdown file content\"\n    },\n    {\n      \"name\": \"POST /api/analyze\",\n      \"purpose\": \"Analyzes a GitHub repository and streams the logs and results to the client.\",\n      \"input\": \"HTTP request with repo URL, GitHub token, and OpenAI token\",\n      \"output\": \"Streaming log messages and analysis completion signal\"\n    }\n  ],\n  \"exports\": [],\n  \"dependencies\": [\n    \"express\",\n    \"cors\",\n    \"dotenv\",\n    \"fs/promises\",\n    \"path\",\n    \"url\"\n  ],\n  \"finalReturnType(s)\": \"HTTP responses (JSON, text, file download)\"\n}"
    },
    {
      "path": "backend/src/utils/display.js",
      "metadata": "{\n  \"name\": \"display.js\",\n  \"path\": \"backend/src/utils/display.js\",\n  \"imports\": [\"chalk\"],\n  \"mainPurpose\": \"Provides functions to display analysis results in a formatted and readable manner using console output.\",\n  \"type\": \"utility module\",\n  \"functions\": [\n    {\n      \"name\": \"displayResults\",\n      \"purpose\": \"Displays the analysis results, including repository information, summary, project structure, call hierarchy, and file analyses.\",\n      \"input\": \"analysis (object containing repository details, summary, file tree, call hierarchy, and file analyses)\",\n      \"output\": \"Logs formatted analysis results to the console\"\n    },\n    {\n      \"name\": \"displayFileTree\",\n      \"purpose\": \"Recursively prints the project file structure in a formatted manner.\",\n      \"input\": \"node (object representing a file or directory), indent (string for indentation formatting)\",\n      \"output\": \"Logs the file tree structure to the console\"\n    }\n  ],\n  \"exports\": [\"displayResults\"],\n  \"dependencies\": [\"chalk\"],\n  \"finalReturnType(s)\": \"void (console output only)\"\n}"
    },
    {
      "path": "backend/src/utils/file.js",
      "metadata": "```json\n{\n  \"name\": \"file.js\",\n  \"path\": \"backend/src/utils/file.js\",\n  \"imports\": [\"fs/promises\"],\n  \"mainPurpose\": \"Handles saving analysis results to files in markdown and JSON formats.\",\n  \"type\": \"Utility Module\",\n  \"functions\": [\n    {\n      \"name\": \"saveToFile\",\n      \"purpose\": \"Saves analysis results to a markdown file and a JSON metadata file.\",\n      \"input\": \"filename (string), analysis (object)\",\n      \"output\": \"Writes files asynchronously, returns a Promise.\"\n    },\n    {\n      \"name\": \"formatFileTree\",\n      \"purpose\": \"Formats a file tree structure into a markdown-compatible representation with GitHub links.\",\n      \"input\": \"node (object), indent (string), repoUrl (string), branch (string), parentPath (string, optional)\",\n      \"output\": \"Formatted string representing the file tree.\"\n    },\n    {\n      \"name\": \"getFullPath\",\n      \"purpose\": \"Constructs the full path of a file or directory node.\",\n      \"input\": \"node (object)\",\n      \"output\": \"String representing the full path of the node.\"\n    }\n  ],\n  \"exports\": [\"saveToFile\", \"formatFileTree\", \"getFullPath\"],\n  \"dependencies\": [\"fs/promises\"],\n  \"finalReturnType(s)\": \"Promise, String\"\n}\n```"
    },
    {
      "path": "backend/src/utils/fileTree.js",
      "metadata": "{\n  \"name\": \"fileTree.js\",\n  \"path\": \"backend/src/utils/fileTree.js\",\n  \"imports\": [],\n  \"mainPurpose\": \"Constructs and sorts a hierarchical file tree structure from a list of file paths.\",\n  \"type\": \"utility\",\n  \"functions\": [\n    {\n      \"name\": \"buildFileTree\",\n      \"purpose\": \"Constructs a hierarchical file tree from a list of file objects.\",\n      \"input\": \"Array of file objects with 'path' and 'type' properties.\",\n      \"output\": \"Sorted hierarchical file tree object.\"\n    },\n    {\n      \"name\": \"sortFileTree\",\n      \"purpose\": \"Recursively sorts the file tree, placing directories before files and sorting alphabetically.\",\n      \"input\": \"File tree node object.\",\n      \"output\": \"Sorted file tree node object.\"\n    }\n  ],\n  \"exports\": [\"buildFileTree\"],\n  \"dependencies\": [],\n  \"finalReturnType(s)\": \"Object (sorted hierarchical file tree)\"\n}"
    },
    {
      "path": "backend/src/utils/github.js",
      "metadata": "{\n  \"name\": \"github.js\",\n  \"path\": \"backend/src/utils/github.js\",\n  \"imports\": [],\n  \"mainPurpose\": \"Parses a GitHub repository URL and extracts the owner and repository name.\",\n  \"type\": \"utility module\",\n  \"functions\": [\n    {\n      \"name\": \"parseGitHubUrl\",\n      \"purpose\": \"Extracts the owner and repository name from a GitHub repository URL.\",\n      \"input\": \"A string representing a GitHub repository URL.\",\n      \"output\": \"An object containing 'owner' and 'repo' properties.\"\n    }\n  ],\n  \"exports\": [\"parseGitHubUrl\"],\n  \"dependencies\": [],\n  \"finalReturnType(s)\": \"Object\"\n}"
    },
    {
      "path": "frontend/index.html",
      "metadata": "{\n  \"name\": \"index.html\",\n  \"path\": \"frontend/index.html\",\n  \"imports\": [\"/src/main.jsx\"],\n  \"mainPurpose\": \"Entry point for the frontend application, defining the root HTML structure and linking the main React script.\",\n  \"type\": \"HTML\",\n  \"functions\": [],\n  \"exports\": [],\n  \"dependencies\": [],\n  \"finalReturnType(s)\": \"HTML Document\"\n}"
    },
    {
      "path": "frontend/src/App.jsx",
      "metadata": "{\n  \"name\": \"App\",\n  \"path\": \"frontend/src/App.jsx\",\n  \"imports\": [\n    {\n      \"module\": \"react\",\n      \"imports\": [\"useState\"]\n    },\n    {\n      \"module\": \"./App.css\",\n      \"imports\": []\n    }\n  ],\n  \"mainPurpose\": \"Renders the main UI for analyzing a GitHub repository and downloading the analysis results.\",\n  \"type\": \"React Functional Component\",\n  \"functions\": [\n    {\n      \"name\": \"handleSubmit\",\n      \"purpose\": \"Handles form submission, sends a request to analyze a GitHub repository, and processes the streamed response.\",\n      \"input\": \"Event object (e)\",\n      \"output\": \"Updates state variables (logs, analysisComplete, isLoading)\"\n    },\n    {\n      \"name\": \"handleDownload\",\n      \"purpose\": \"Handles downloading the analysis results from the backend.\",\n      \"input\": \"None\",\n      \"output\": \"Triggers a file download\"\n    }\n  ],\n  \"exports\": [\"App\"],\n  \"dependencies\": [\"react\", \"fetch API\"],\n  \"finalReturnType(s)\": \"JSX (React component UI)\"\n}"
    },
    {
      "path": "frontend/src/main.jsx",
      "metadata": "{\n  \"name\": \"main.jsx\",\n  \"path\": \"frontend/src/main.jsx\",\n  \"imports\": [\n    {\n      \"module\": \"react\",\n      \"imports\": [\"StrictMode\"]\n    },\n    {\n      \"module\": \"react-dom/client\",\n      \"imports\": [\"createRoot\"]\n    },\n    {\n      \"module\": \"./index.css\",\n      \"imports\": []\n    },\n    {\n      \"module\": \"./App.jsx\",\n      \"imports\": [\"App\"]\n    }\n  ],\n  \"mainPurpose\": \"Entry point for the React frontend application, rendering the root component into the DOM.\",\n  \"type\": \"React Entry File\",\n  \"functions\": [],\n  \"exports\": [],\n  \"dependencies\": [\"react\", \"react-dom\"],\n  \"finalReturnType(s)\": \"React Component Render\"\n}"
    },
    {
      "path": "frontend/vite.config.js",
      "metadata": "{\n  \"name\": \"vite.config.js\",\n  \"path\": \"frontend/vite.config.js\",\n  \"imports\": [\"vite\", \"@vitejs/plugin-react\"],\n  \"mainPurpose\": \"Configuration file for Vite, specifying plugins and settings for the frontend build process.\",\n  \"type\": \"Configuration\",\n  \"functions\": [\n    {\n      \"name\": \"defineConfig\",\n      \"purpose\": \"Defines and exports the Vite configuration.\",\n      \"input\": \"Configuration object\",\n      \"output\": \"Vite configuration object\"\n    }\n  ],\n  \"exports\": [\"defineConfig\"],\n  \"dependencies\": [\"vite\", \"@vitejs/plugin-react\"],\n  \"finalReturnType(s)\": \"Vite configuration object\"\n}"
    }
  ],
  "callHierarchy": ""
}