{
  "repository": {
    "name": "RepoSage",
    "description": "A tool to help understand Github repositories, file by file with Call Hierarchy and Summary of the project.",
    "language": "JavaScript"
  },
  "fileMetadata": [
    {
      "path": "backend/index.js",
      "metadata": "{\n  \"name\": \"index.js\",\n  \"path\": \"backend/index.js\",\n  \"imports\": [\n    \"express\",\n    \"cors\",\n    \"@octokit/rest\",\n    \"openai\",\n    \"fs/promises\",\n    \"path\"\n  ],\n  \"mainPurpose\": \"Set up an Express server to analyze GitHub repositories using OpenAI.\",\n  \"type\": \"Node.js backend\",\n  \"functions\": [\n    {\n      \"name\": \"app.post('/api/analyze')\",\n      \"purpose\": \"Handle POST requests to analyze a GitHub repository.\",\n      \"input\": {\n        \"repo\": \"URL of the GitHub repository\",\n        \"githubToken\": \"GitHub authentication token\",\n        \"openaiToken\": \"OpenAI API key\"\n      },\n      \"output\": \"Detailed analysis of the repository in markdown format.\"\n    },\n    {\n      \"name\": \"sendUpdate\",\n      \"purpose\": \"Send updates to the client during the analysis process.\",\n      \"input\": \"message: string\",\n      \"output\": \"None\"\n    }\n  ],\n  \"exports\": [],\n  \"dependencies\": [\n    \"express\",\n    \"cors\",\n    \"@octokit/rest\",\n    \"openai\",\n    \"fs/promises\",\n    \"path\"\n  ],\n  \"finalReturnType(s)\": \"None\"\n}"
    },
    {
      "path": "backend/src/utils/display.js",
      "metadata": "{\n  \"name\": \"display.js\",\n  \"path\": \"backend/src/utils/display.js\",\n  \"imports\": [\n    \"chalk\"\n  ],\n  \"mainPurpose\": \"To display formatted analysis results and project structure information in the console.\",\n  \"type\": \"module\",\n  \"functions\": [\n    {\n      \"name\": \"displayResults\",\n      \"purpose\": \"Displays the analysis results including repository information, summary, project structure, call hierarchy, and file analyses.\",\n      \"input\": \"analysis (object containing repository details, summary, file tree, call hierarchy, and file analyses)\",\n      \"output\": \"None (logs information to the console)\"\n    },\n    {\n      \"name\": \"displayFileTree\",\n      \"purpose\": \"Recursively displays the file tree structure in a formatted manner.\",\n      \"input\": \"node (object representing a file or directory), indent (string for indentation)\",\n      \"output\": \"None (logs file tree structure to the console)\"\n    }\n  ],\n  \"exports\": [\n    \"displayResults\"\n  ],\n  \"dependencies\": [\n    \"chalk\"\n  ],\n  \"finalReturnType(s)\": \"None\"\n}"
    },
    {
      "path": "backend/src/utils/file.js",
      "metadata": "{\n  \"name\": \"file.js\",\n  \"path\": \"backend/src/utils/file.js\",\n  \"imports\": [\n    {\n      \"module\": \"fs/promises\",\n      \"imported\": [\"writeFile\"]\n    }\n  ],\n  \"mainPurpose\": \"To save analysis results to a markdown file and corresponding JSON metadata.\",\n  \"type\": \"module\",\n  \"functions\": [\n    {\n      \"name\": \"saveToFile\",\n      \"purpose\": \"Saves analysis results in markdown and JSON formats.\",\n      \"input\": \"filename (string), analysis (object)\",\n      \"output\": \"Promise<void>\"\n    },\n    {\n      \"name\": \"formatFileTree\",\n      \"purpose\": \"Formats the file tree structure for markdown representation.\",\n      \"input\": \"node (object), indent (string), repoUrl (string), branch (string), parentPath (string)\",\n      \"output\": \"string\"\n    },\n    {\n      \"name\": \"getFullPath\",\n      \"purpose\": \"Retrieves the full path of a file or directory node.\",\n      \"input\": \"node (object)\",\n      \"output\": \"string\"\n    }\n  ],\n  \"exports\": [\n    \"saveToFile\"\n  ],\n  \"dependencies\": [\n    \"fs/promises\"\n  ],\n  \"finalReturnType(s)\": \"Promise<void>\"\n}"
    },
    {
      "path": "backend/src/utils/github.js",
      "metadata": "{\n  \"name\": \"github.js\",\n  \"path\": \"backend/src/utils/github.js\",\n  \"imports\": [],\n  \"mainPurpose\": \"To parse a GitHub repository URL and extract the owner and repository name.\",\n  \"type\": \"module\",\n  \"functions\": [\n    {\n      \"name\": \"parseGitHubUrl\",\n      \"purpose\": \"Extracts the owner and repository name from a given GitHub URL.\",\n      \"input\": \"A string representing a GitHub repository URL.\",\n      \"output\": \"An object containing the owner and repository name.\"\n    }\n  ],\n  \"exports\": [\n    \"parseGitHubUrl\"\n  ],\n  \"dependencies\": [],\n  \"finalReturnType(s)\": \"Object\"\n}"
    },
    {
      "path": "frontend/src/App.jsx",
      "metadata": "{\n  \"name\": \"App\",\n  \"path\": \"frontend/src/App.jsx\",\n  \"imports\": [\n    \"useState from 'react'\",\n    \"'./App.css'\"\n  ],\n  \"mainPurpose\": \"To provide a user interface for analyzing GitHub repositories and downloading analysis results.\",\n  \"type\": \"Functional Component\",\n  \"functions\": [\n    {\n      \"name\": \"handleSubmit\",\n      \"purpose\": \"Handles the form submission to analyze the GitHub repository.\",\n      \"input\": \"Event object from form submission.\",\n      \"output\": \"Logs the analysis progress and updates the analysis completion state.\"\n    },\n    {\n      \"name\": \"handleDownload\",\n      \"purpose\": \"Handles the download of the analysis results.\",\n      \"input\": \"None.\",\n      \"output\": \"Triggers a download of the analysis results file.\"\n    }\n  ],\n  \"exports\": [\n    \"App\"\n  ],\n  \"dependencies\": [\n    \"useState\"\n  ],\n  \"finalReturnType(s)\": \"JSX element\"\n}"
    },
    {
      "path": "frontend/src/main.jsx",
      "metadata": "{\n  \"name\": \"main.jsx\",\n  \"path\": \"frontend/src/main.jsx\",\n  \"imports\": [\n    \"StrictMode from 'react'\",\n    \"createRoot from 'react-dom/client'\",\n    \"'./index.css'\",\n    \"App from './App.jsx'\"\n  ],\n  \"mainPurpose\": \"Entry point for the React application, rendering the main App component within a StrictMode wrapper.\",\n  \"type\": \"JavaScript\",\n  \"functions\": [],\n  \"exports\": [],\n  \"dependencies\": [\n    \"react\",\n    \"react-dom\"\n  ],\n  \"finalReturnType(s)\": \"ReactNode\"\n}"
    },
    {
      "path": "frontend/vite.config.js",
      "metadata": "{\n  \"name\": \"vite.config.js\",\n  \"path\": \"frontend/vite.config.js\",\n  \"imports\": [\n    {\n      \"module\": \"vite\",\n      \"imported\": \"defineConfig\"\n    },\n    {\n      \"module\": \"@vitejs/plugin-react\",\n      \"imported\": \"react\"\n    }\n  ],\n  \"mainPurpose\": \"Configuration file for Vite, setting up plugins for a React application.\",\n  \"type\": \"configuration\",\n  \"functions\": [\n    {\n      \"name\": \"defineConfig\",\n      \"purpose\": \"Defines the configuration for Vite.\",\n      \"input\": \"An object containing configuration options.\",\n      \"output\": \"A Vite configuration object.\"\n    }\n  ],\n  \"exports\": [\n    \"default\"\n  ],\n  \"dependencies\": [\n    \"vite\",\n    \"@vitejs/plugin-react\"\n  ],\n  \"finalReturnType(s)\": \"Vite configuration object\"\n}"
    }
  ],
  "callHierarchy": "Here's the structured call hierarchy for the **RepoSage** project, showing the main execution path and important function calls between files, along with their dependencies.\n\n### Call Hierarchy\n\n📁 **index.js** → `None` [backend/index.js]\n├─ 🔷 `app.post('/api/analyze')`(repo: string, githubToken: string, openaiToken: string) → `Promise<void>` [backend/index.js]\n│   ├─ 🟣 `parseGitHubUrl(url: string)` → `Object` [backend/src/utils/github.js]\n│   ├─ 🟠 `analyzeRepository(repoDetails: Object)` → `Promise<Object>` [backend/analyzer.js]\n│   │   ├─ 🟢 `sendUpdate(message: string)` → `None` [backend/index.js]\n│   │   ├─ 🟡 `displayResults(analysis: Object)` → `None` [backend/src/utils/display.js]\n│   │   ├─ 🔴 `saveToFile(filename: string, analysis: Object)` → `Promise<void>` [backend/src/utils/file.js]\n│   │   └─ 🟣 `formatFileTree(node: Object, indent: string, repoUrl: string, branch: string, parentPath: string)` → `string` [backend/src/utils/file.js]\n│   └─ 🔶 `sendUpdate(message: string)` → `None` [backend/index.js]\n\n---\n\n📁 **main.jsx** → `ReactNode` [frontend/src/main.jsx]\n├─ 🔷 `createRoot()` → `void` [frontend/src/main.jsx]\n│   └─ 🔶 `App()` → `JSX.Element` [frontend/src/App.jsx]\n│       ├─ 🟣 `handleSubmit(event: Event)` → `void` [frontend/src/App.jsx]\n│       │   ├─ 🔴 `fetch('/api/analyze', { method: 'POST', body: JSON.stringify(data) })` → `Promise<Response>` [frontend/src/App.jsx]\n│       │   └─ 🟢 `handleDownload()` → `void` [frontend/src/App.jsx]\n│       └─ 🟠 `handleDownload()` → `void` [frontend/src/App.jsx]\n\n---\n\n### Main Execution Flow\n\n1. **Entry Point**: The application starts execution from `main.jsx`, which sets up the React application.\n2. **User Interaction**: The user interacts with the UI, triggering the `handleSubmit` function in `App.jsx` when they submit a form.\n3. **API Call**: The `handleSubmit` function makes a POST request to the `/api/analyze` endpoint defined in `index.js`.\n4. **Repository Analysis**: The `app.post('/api/analyze')` function in `index.js` handles the incoming request, parsing the GitHub URL using `parseGitHubUrl` from `github.js`, and then calls `analyzeRepository`.\n5. **Processing**: The `analyzeRepository` function performs the analysis and may call utility functions to display results and save files.\n6. **Display Results**: The results are displayed in the console using `displayResults` from `display.js`.\n7. **File Operations**: The analysis results are saved to files using `saveToFile` from `file.js`.\n8. **Feedback to Frontend**: Throughout the process, updates are sent back to the client using `sendUpdate`.\n\n### Important Function Calls Between Files\n\n- **Backend**:\n  - `index.js` → `github.js`: `parseGitHubUrl`\n  - `index.js` → `analyzer.js`: `analyzeRepository`\n  - `analyzer.js` → `display.js`: `displayResults`\n  - `analyzer.js` → `file.js`: `saveToFile`, `formatFileTree`\n  \n- **Frontend**:\n  - `main.jsx` → `App.jsx`: `App`\n  - `App.jsx` → `handleSubmit`: Makes a POST request to `index.js`\n  - `App.jsx` → `handleDownload`: Triggers file download.\n\n### Dependencies Between Modules\n\n- **Backend**:\n  - `index.js` depends on `github.js`, `analyzer.js`, `display.js`, and `file.js`.\n  - `analyzer.js` depends on `display.js` and `file.js`.\n\n- **Frontend**:\n  - `main.jsx` depends on `App.jsx`.\n  - `App.jsx` depends on React hooks and handles API calls.\n\nThis structured hierarchy provides a clear overview of how the application flows from the entry point through various files and functions, highlighting the key interactions and dependencies within the **RepoSage** project."
}