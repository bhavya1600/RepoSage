{
  "repository": {
    "name": "github-repo-bot",
    "description": "A tool to help understand Github repositories, file by file with Call Hierarchy and Summary of the project.",
    "language": "JavaScript"
  },
  "fileMetadata": [
    {
      "path": "backend/index.js",
      "metadata": "{\n  \"name\": \"index.js\",\n  \"path\": \"backend/index.js\",\n  \"imports\": [\n    \"express\",\n    \"cors\",\n    \"@octokit/rest\",\n    \"openai\",\n    \"fs/promises\",\n    \"path\"\n  ],\n  \"mainPurpose\": \"Set up an Express server to analyze GitHub repositories using OpenAI.\",\n  \"type\": \"JavaScript\",\n  \"functions\": [\n    {\n      \"name\": \"sendUpdate\",\n      \"purpose\": \"Send updates to the client during the analysis process.\",\n      \"input\": \"message (string)\",\n      \"output\": \"void\"\n    }\n  ],\n  \"exports\": [],\n  \"dependencies\": [\n    \"express\",\n    \"cors\",\n    \"@octokit/rest\",\n    \"openai\",\n    \"fs/promises\",\n    \"path\"\n  ],\n  \"finalReturnType(s)\": \"void\"\n}"
    },
    {
      "path": "backend/src/analyzer.js",
      "metadata": "```json\n{\n  \"name\": \"analyzer.js\",\n  \"path\": \"backend/src/analyzer.js\",\n  \"imports\": [\n    \"Octokit from 'octokit'\",\n    \"OpenAI from 'openai'\",\n    \"parseGitHubUrl from './utils/github.js'\",\n    \"buildFileTree from './utils/fileTree.js'\",\n    \"chalk from 'chalk'\",\n    \"fs from 'fs'\",\n    \"path from 'path'\",\n    \"fileURLToPath from 'url'\",\n    \"dirname from 'path'\",\n    \"resolve from 'path'\"\n  ],\n  \"mainPurpose\": \"To analyze a GitHub repository by fetching its metadata, file tree, and README content, and then providing insights and summaries based on the analysis.\",\n  \"type\": \"module\",\n  \"functions\": [\n    {\n      \"name\": \"createChatCompletion\",\n      \"purpose\": \"Creates a chat completion using OpenAI's API based on the provided model and prompt.\",\n      \"input\": \"openai (OpenAI instance), model (string), modelType (string), analysisPrompt (string)\",\n      \"output\": \"Promise resolving to the completion response from OpenAI.\"\n    },\n    {\n      \"name\": \"saveApiCallContent\",\n      \"purpose\": \"Saves the content of an API call to a text file for logging purposes.\",\n      \"input\": \"functionName (string), content (string)\",\n      \"output\": \"Promise resolving when the content is saved.\"\n    },\n    {\n      \"name\": \"analyzeRepository\",\n      \"purpose\": \"Analyzes a GitHub repository by fetching its metadata and file structure, and generating an analysis report.\",\n      \"input\": \"repoUrl (string)\",\n      \"output\": \"Promise resolving to an analysis object containing repository data, file tree, and analysis results.\"\n    },\n    {\n      \"name\": \"analyzeProjectStructure\",\n      \"purpose\": \"Analyzes the project structure based on repository metadata and README content.\",\n      \"input\": \"openai (OpenAI instance), repoData (object), files (array), readmeContent (string)\",\n      \"output\": \"Promise resolving to a string summarizing the project structure.\"\n    },\n    {\n      \"name\": \"smartFileFilter\",\n      \"purpose\": \"Filters files to identify essential files needed for understanding the codebase.\",\n      \"input\": \"files (array), projectUnderstanding (string)\",\n      \"output\": \"Promise resolving to an array of essential file objects.\"\n    },\n    {\n      \"name\": \"summarizeContent\",\n      \"purpose\": \"Generates a summary of the provided code content.\",\n      \"input\": \"openai (OpenAI instance), content (string), fileTree (array)\",\n      \"output\": \"Promise resolving to a summary string.\"\n    },\n    {\n      \"name\": \"analyzeCode\",\n      \"purpose\": \"Analyzes a specific code file and provides a human-readable explanation and metadata.\",\n      \"input\": \"openai (OpenAI instance), filePath (string), content (string), fileTree (array)\",\n      \"output\": \"Promise resolving to an object containing text analysis and JSON metadata.\"\n    },\n    {\n      \"name\": \"analyzeCallHierarchy\",\n      \"purpose\": \"Creates a call hierarchy based on project understanding and file metadata.\",\n      \"input\": \"openai (OpenAI instance), fileMetadata (array), projectUnderstanding (string)\",\n      \"output\": \"Promise resolving to a string representing the call hierarchy.\"\n    },\n    {\n      \"name\": \"generateSummary\",\n      \"purpose\": \"Generates a summary of the project based on analysis results.\",\n      \"input\": \"openai (OpenAI instance), analysis (object)\",\n      \"output\": \"Promise resolving to a summary string.\"\n    }\n  ],\n  \"exports\": [\n    \"analyzeRepository\"\n  ],\n  \"dependencies\": [\n    \"octokit\",\n    \"openai\",\n    \"chalk\",\n    \"fs\",\n    \"path\"\n  ],\n  \"finalReturnType(s)\": \"Promise resolving to an analysis object containing repository data, file tree, and analysis results.\"\n}\n```"
    },
    {
      "path": "backend/src/utils/display.js",
      "metadata": "{\n  \"name\": \"display.js\",\n  \"path\": \"backend/src/utils/display.js\",\n  \"imports\": [\n    \"chalk\"\n  ],\n  \"mainPurpose\": \"To display formatted analysis results in the console.\",\n  \"type\": \"module\",\n  \"functions\": [\n    {\n      \"name\": \"displayResults\",\n      \"purpose\": \"Displays the results of the analysis in a formatted manner.\",\n      \"input\": \"analysis (object containing repository information, summary, file tree, call hierarchy, and file analyses)\",\n      \"output\": \"None (logs output to the console)\"\n    },\n    {\n      \"name\": \"displayFileTree\",\n      \"purpose\": \"Recursively displays the file tree structure in a formatted manner.\",\n      \"input\": \"node (object representing a file or directory), indent (string for indentation)\",\n      \"output\": \"None (logs output to the console)\"\n    }\n  ],\n  \"exports\": [\n    \"displayResults\"\n  ],\n  \"dependencies\": [\n    \"chalk\"\n  ],\n  \"finalReturnType(s)\": \"None\"\n}"
    },
    {
      "path": "backend/src/utils/file.js",
      "metadata": "{\n  \"name\": \"file.js\",\n  \"path\": \"backend/src/utils/file.js\",\n  \"imports\": [\n    {\n      \"module\": \"fs/promises\",\n      \"imported\": [\"writeFile\"]\n    }\n  ],\n  \"mainPurpose\": \"To save analysis results to a markdown file and corresponding JSON metadata.\",\n  \"type\": \"module\",\n  \"functions\": [\n    {\n      \"name\": \"saveToFile\",\n      \"purpose\": \"Saves analysis results to a markdown file and a JSON file.\",\n      \"input\": \"filename (string), analysis (object)\",\n      \"output\": \"Promise<void>\"\n    },\n    {\n      \"name\": \"formatFileTree\",\n      \"purpose\": \"Formats a file tree structure into a markdown representation.\",\n      \"input\": \"node (object), indent (string), repoUrl (string), branch (string), parentPath (string)\",\n      \"output\": \"string\"\n    },\n    {\n      \"name\": \"getFullPath\",\n      \"purpose\": \"Retrieves the full path of a file or directory node.\",\n      \"input\": \"node (object)\",\n      \"output\": \"string\"\n    }\n  ],\n  \"exports\": [],\n  \"dependencies\": [\n    \"fs/promises\"\n  ],\n  \"finalReturnType(s)\": \"Promise<void>\"\n}"
    },
    {
      "path": "backend/src/utils/fileTree.js",
      "metadata": "{\n  \"name\": \"fileTree.js\",\n  \"path\": \"backend/src/utils/fileTree.js\",\n  \"imports\": [],\n  \"mainPurpose\": \"Builds a hierarchical representation of a file structure from a list of file paths.\",\n  \"type\": \"JavaScript\",\n  \"functions\": [\n    {\n      \"name\": \"buildFileTree\",\n      \"purpose\": \"Creates a file tree structure from an array of file objects.\",\n      \"input\": \"Array of file objects, each containing a 'path' and 'type'.\",\n      \"output\": \"A nested object representing the file tree structure.\"\n    },\n    {\n      \"name\": \"sortFileTree\",\n      \"purpose\": \"Sorts the children of a file tree node by type and name.\",\n      \"input\": \"A file tree node.\",\n      \"output\": \"A sorted file tree node.\"\n    }\n  ],\n  \"exports\": [\"buildFileTree\"],\n  \"dependencies\": [],\n  \"finalReturnType(s)\": \"Object representing the sorted file tree.\"\n}"
    },
    {
      "path": "backend/src/utils/github.js",
      "metadata": "{\n  \"name\": \"github.js\",\n  \"path\": \"backend/src/utils/github.js\",\n  \"imports\": [],\n  \"mainPurpose\": \"To parse a GitHub repository URL and extract the owner and repository name.\",\n  \"type\": \"utility\",\n  \"functions\": [\n    {\n      \"name\": \"parseGitHubUrl\",\n      \"purpose\": \"Extracts the owner and repository name from a given GitHub URL.\",\n      \"input\": \"A string representing the GitHub repository URL.\",\n      \"output\": \"An object containing the owner and repo name.\"\n    }\n  ],\n  \"exports\": [\n    \"parseGitHubUrl\"\n  ],\n  \"dependencies\": [],\n  \"finalReturnType(s)\": \"Object\"\n}"
    },
    {
      "path": "frontend/index.html",
      "metadata": "{\n  \"name\": \"index.html\",\n  \"path\": \"frontend/index.html\",\n  \"imports\": [\n    \"/src/main.jsx\"\n  ],\n  \"mainPurpose\": \"This file serves as the entry point for the web application, setting up the HTML structure and linking to the main JavaScript file.\",\n  \"type\": \"HTML\",\n  \"functions\": [],\n  \"exports\": [],\n  \"dependencies\": [],\n  \"finalReturnType(s)\": \"\"\n}"
    },
    {
      "path": "frontend/src/App.jsx",
      "metadata": "{\n  \"name\": \"App\",\n  \"path\": \"frontend/src/App.jsx\",\n  \"imports\": [\n    {\n      \"module\": \"react\",\n      \"namedImports\": [\"useState\"]\n    },\n    {\n      \"module\": \"./App.css\"\n    }\n  ],\n  \"mainPurpose\": \"To provide a user interface for analyzing a GitHub repository and downloading the analysis results.\",\n  \"type\": \"Functional Component\",\n  \"functions\": [\n    {\n      \"name\": \"handleSubmit\",\n      \"purpose\": \"Handles the form submission to analyze the GitHub repository.\",\n      \"input\": \"Event object from form submission.\",\n      \"output\": \"Logs the analysis progress and results.\"\n    },\n    {\n      \"name\": \"handleDownload\",\n      \"purpose\": \"Handles the download of the analysis results.\",\n      \"input\": \"None.\",\n      \"output\": \"Triggers a download of the analysis results file.\"\n    }\n  ],\n  \"exports\": [\n    \"App\"\n  ],\n  \"dependencies\": [\n    \"react\"\n  ],\n  \"finalReturnType(s)\": \"JSX Element\"\n}"
    },
    {
      "path": "frontend/vite.config.js",
      "metadata": "{\n  \"name\": \"vite.config.js\",\n  \"path\": \"frontend/vite.config.js\",\n  \"imports\": [\n    {\n      \"module\": \"vite\",\n      \"imported\": \"defineConfig\"\n    },\n    {\n      \"module\": \"@vitejs/plugin-react\",\n      \"imported\": \"react\"\n    }\n  ],\n  \"mainPurpose\": \"Configuration file for Vite, a build tool for modern web projects, specifically for a React application.\",\n  \"type\": \"configuration\",\n  \"functions\": [],\n  \"exports\": [\n    {\n      \"name\": \"default\",\n      \"type\": \"configuration object\",\n      \"purpose\": \"Exports the Vite configuration object defined by defineConfig.\"\n    }\n  ],\n  \"dependencies\": [\n    \"vite\",\n    \"@vitejs/plugin-react\"\n  ],\n  \"finalReturnType(s)\": \"configuration object\"\n}"
    }
  ],
  "callHierarchy": "Here’s a structured call hierarchy for the `github-repo-bot` project based on the provided project understanding and file metadata. This hierarchy outlines the main execution flow, important function calls between files, and dependencies between modules.\n\n### Call Hierarchy\n\n```plaintext\n📁 startServer() → void [backend/index.js]\n├─ 🔷 sendUpdate(message: string) → void [backend/index.js]\n├─ 🔷 analyzeRepository(repoUrl: string) → Promise<AnalysisObject> [backend/src/analyzer.js]\n│   ├─ 🟣 parseGitHubUrl(url: string) → { owner: string, repo: string } [backend/src/utils/github.js]\n│   ├─ 🟣 buildFileTree(files: Array<FileObject>) → Object [backend/src/utils/fileTree.js]\n│   ├─ 🟣 createChatCompletion(openai: OpenAI, model: string, modelType: string, analysisPrompt: string) → Promise<CompletionResponse> [backend/src/analyzer.js]\n│   ├─ 🟣 analyzeProjectStructure(openai: OpenAI, repoData: Object, files: Array<FileObject>, readmeContent: string) → Promise<string> [backend/src/analyzer.js]\n│   ├─ 🟣 smartFileFilter(files: Array<FileObject>, projectUnderstanding: string) → Promise<Array<EssentialFileObject>> [backend/src/analyzer.js]\n│   ├─ 🟣 summarizeContent(openai: OpenAI, content: string, fileTree: Array<FileObject>) → Promise<string> [backend/src/analyzer.js]\n│   ├─ 🟣 analyzeCode(openai: OpenAI, filePath: string, content: string, fileTree: Array<FileObject>) → Promise<CodeAnalysisObject> [backend/src/analyzer.js]\n│   ├─ 🟣 analyzeCallHierarchy(openai: OpenAI, fileMetadata: Array<FileMetadata>, projectUnderstanding: string) → Promise<string> [backend/src/analyzer.js]\n│   └─ 🟣 generateSummary(openai: OpenAI, analysis: Object) → Promise<string> [backend/src/analyzer.js]\n├─ 🔷 displayResults(analysis: Object) → void [backend/src/utils/display.js]\n├─ 🔷 saveToFile(filename: string, analysis: Object) → Promise<void> [backend/src/utils/file.js]\n└─ 🔷 handleRequest(req: Request, res: Response) → void [backend/index.js]\n```\n\n### Explanation of the Call Hierarchy\n\n1. **Entry Point**:\n   - The main entry point for the backend is `startServer()` in `backend/index.js`, which sets up the Express server.\n\n2. **Main Execution Flow**:\n   - The server listens for requests and handles them through the `handleRequest()` function.\n   - When a request to analyze a GitHub repository is received, it calls `analyzeRepository(repoUrl)`.\n\n3. **Important Function Calls**:\n   - Inside `analyzeRepository(repoUrl)`, several important functions are called:\n     - `parseGitHubUrl(url)` extracts the owner and repository name from the provided GitHub URL.\n     - `buildFileTree(files)` constructs a hierarchical representation of the file structure.\n     - Various functions that interact with the OpenAI API for analysis, such as `createChatCompletion()`, `analyzeProjectStructure()`, `smartFileFilter()`, `summarizeContent()`, `analyzeCode()`, `analyzeCallHierarchy()`, and `generateSummary()`.\n\n4. **Dependencies Between Modules**:\n   - The `analyzer.js` file imports utility functions from `github.js` and `fileTree.js`, and it also interacts with the OpenAI API.\n   - The `display.js` file is responsible for formatting and displaying results in the console.\n   - The `file.js` file handles saving analysis results to files.\n\n### Summary\nThis call hierarchy provides a clear mapping of how the application flows from the entry point through various files and functions, highlighting the main execution path and important function calls. The structure promotes modular design, making it easier to understand and maintain the application."
}