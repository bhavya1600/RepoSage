{
  "repository": {
    "name": "RepoSage",
    "description": "A tool to help understand Github repositories, file by file with Call Hierarchy and Summary of the project.",
    "language": "JavaScript"
  },
  "fileMetadata": [
    {
      "path": "backend/index.js",
      "metadata": "{\n  \"name\": \"index.js\",\n  \"path\": \"backend/index.js\",\n  \"imports\": [\n    \"express\",\n    \"cors\",\n    \"@octokit/rest\",\n    \"openai\",\n    \"fs/promises\",\n    \"path\"\n  ],\n  \"mainPurpose\": \"Set up an Express server to analyze GitHub repositories using OpenAI.\",\n  \"type\": \"JavaScript\",\n  \"functions\": [\n    {\n      \"name\": \"sendUpdate\",\n      \"purpose\": \"Send updates to the client during the analysis process.\",\n      \"input\": \"message (string)\",\n      \"output\": \"void\"\n    }\n  ],\n  \"exports\": [],\n  \"dependencies\": [\n    \"express\",\n    \"cors\",\n    \"@octokit/rest\",\n    \"openai\",\n    \"fs/promises\",\n    \"path\"\n  ],\n  \"finalReturnType(s)\": \"void\"\n}"
    },
    {
      "path": "backend/src/analyzer.js",
      "metadata": "```json\n{\n  \"name\": \"analyzer.js\",\n  \"path\": \"backend/src/analyzer.js\",\n  \"imports\": [\n    \"Octokit from 'octokit'\",\n    \"OpenAI from 'openai'\",\n    \"parseGitHubUrl from './utils/github.js'\",\n    \"buildFileTree from './utils/fileTree.js'\",\n    \"chalk from 'chalk'\",\n    \"fs from 'fs'\",\n    \"path from 'path'\",\n    \"fileURLToPath from 'url'\",\n    \"dirname from 'path'\",\n    \"resolve from 'path'\"\n  ],\n  \"mainPurpose\": \"To analyze a GitHub repository by fetching its metadata, file tree, and README content, and then generating an analysis of the project's structure and functionality using OpenAI's API.\",\n  \"type\": \"module\",\n  \"functions\": [\n    {\n      \"name\": \"createChatCompletion\",\n      \"purpose\": \"Creates a chat completion using OpenAI's API based on the provided model and prompt.\",\n      \"input\": \"openai (OpenAI instance), model (string), modelType (string), analysisPrompt (string)\",\n      \"output\": \"Promise that resolves to the response from OpenAI's API.\"\n    },\n    {\n      \"name\": \"saveApiCallContent\",\n      \"purpose\": \"Saves the content of API calls to a text file for logging purposes.\",\n      \"input\": \"functionName (string), content (string)\",\n      \"output\": \"Promise that resolves when the content is appended to the file.\"\n    },\n    {\n      \"name\": \"analyzeRepository\",\n      \"purpose\": \"Main function to analyze a GitHub repository by fetching its metadata and file tree, and generating analysis.\",\n      \"input\": \"repoUrl (string)\",\n      \"output\": \"Promise that resolves to an analysis object containing repository metadata, file tree, and analysis results.\"\n    },\n    {\n      \"name\": \"analyzeProjectStructure\",\n      \"purpose\": \"Analyzes the project structure based on the repository metadata and README content.\",\n      \"input\": \"openai (OpenAI instance), repoData (object), files (array), readmeContent (string)\",\n      \"output\": \"Promise that resolves to a string summarizing the project structure.\"\n    },\n    {\n      \"name\": \"smartFileFilter\",\n      \"purpose\": \"Filters files to identify essential files needed for understanding the codebase.\",\n      \"input\": \"files (array), projectUnderstanding (string)\",\n      \"output\": \"Promise that resolves to an array of relevant file objects.\"\n    },\n    {\n      \"name\": \"summarizeContent\",\n      \"purpose\": \"Summarizes the key aspects of a given code content based on the project file tree.\",\n      \"input\": \"openai (OpenAI instance), content (string), fileTree (array)\",\n      \"output\": \"Promise that resolves to a string summarizing the content.\"\n    },\n    {\n      \"name\": \"analyzeCode\",\n      \"purpose\": \"Analyzes a specific code file to provide a human-readable explanation and JSON metadata.\",\n      \"input\": \"openai (OpenAI instance), filePath (string), content (string), fileTree (array)\",\n      \"output\": \"Promise that resolves to an object containing text analysis and JSON metadata.\"\n    },\n    {\n      \"name\": \"analyzeCallHierarchy\",\n      \"purpose\": \"Analyzes the call hierarchy of the application based on the project understanding and file metadata.\",\n      \"input\": \"openai (OpenAI instance), fileMetadata (array), projectUnderstanding (string)\",\n      \"output\": \"Promise that resolves to a string representing the call hierarchy.\"\n    },\n    {\n      \"name\": \"generateSummary\",\n      \"purpose\": \"Generates a summary of the project based on its repository info, understanding, file tree, metadata, and call hierarchy.\",\n      \"input\": \"openai (OpenAI instance), analysis (object)\",\n      \"output\": \"Promise that resolves to a string summarizing the project.\"\n    }\n  ],\n  \"exports\": [\n    \"analyzeRepository\"\n  ],\n  \"dependencies\": [\n    \"octokit\",\n    \"openai\",\n    \"chalk\",\n    \"fs\",\n    \"path\",\n    \"url\"\n  ],\n  \"finalReturnType(s)\": \"Promise that resolves to an analysis object containing repository metadata, file tree, and analysis results.\"\n}\n```"
    },
    {
      "path": "backend/src/utils/display.js",
      "metadata": "{\n  \"name\": \"display.js\",\n  \"path\": \"backend/src/utils/display.js\",\n  \"imports\": [\"chalk\"],\n  \"mainPurpose\": \"To display analysis results in a formatted manner using console logs.\",\n  \"type\": \"module\",\n  \"functions\": [\n    {\n      \"name\": \"displayResults\",\n      \"purpose\": \"Displays the results of an analysis including repository information, summary, project structure, call hierarchy, and file analyses.\",\n      \"input\": \"analysis (object containing repository details, summary, file tree, call hierarchy, and file analyses)\",\n      \"output\": \"None (logs output to console)\"\n    },\n    {\n      \"name\": \"displayFileTree\",\n      \"purpose\": \"Recursively displays the file tree structure in a formatted manner.\",\n      \"input\": \"node (object representing a file or directory), indent (string for formatting)\",\n      \"output\": \"None (logs output to console)\"\n    }\n  ],\n  \"exports\": [\"displayResults\"],\n  \"dependencies\": [\"chalk\"],\n  \"finalReturnType(s)\": \"None\"\n}"
    },
    {
      "path": "backend/src/utils/file.js",
      "metadata": "{\n  \"name\": \"file.js\",\n  \"path\": \"backend/src/utils/file.js\",\n  \"imports\": [\n    {\n      \"module\": \"fs/promises\",\n      \"imported\": [\"writeFile\"]\n    }\n  ],\n  \"mainPurpose\": \"To save analysis results to a markdown file and corresponding JSON metadata.\",\n  \"type\": \"module\",\n  \"functions\": [\n    {\n      \"name\": \"saveToFile\",\n      \"purpose\": \"Saves analysis results in markdown and JSON format.\",\n      \"input\": \"filename (string), analysis (object)\",\n      \"output\": \"Promise<void>\"\n    },\n    {\n      \"name\": \"formatFileTree\",\n      \"purpose\": \"Formats the file tree structure for display in markdown.\",\n      \"input\": \"node (object), indent (string), repoUrl (string), branch (string), parentPath (string)\",\n      \"output\": \"string\"\n    },\n    {\n      \"name\": \"getFullPath\",\n      \"purpose\": \"Retrieves the full path of a file or directory node.\",\n      \"input\": \"node (object)\",\n      \"output\": \"string\"\n    }\n  ],\n  \"exports\": [\n    \"saveToFile\"\n  ],\n  \"dependencies\": [\n    \"fs/promises\"\n  ],\n  \"finalReturnType(s)\": \"Promise<void>\"\n}"
    },
    {
      "path": "backend/src/utils/fileTree.js",
      "metadata": "{\n  \"name\": \"fileTree.js\",\n  \"path\": \"backend/src/utils/fileTree.js\",\n  \"imports\": [],\n  \"mainPurpose\": \"Builds a hierarchical representation of a file tree from a list of files.\",\n  \"type\": \"JavaScript\",\n  \"functions\": [\n    {\n      \"name\": \"buildFileTree\",\n      \"purpose\": \"Constructs a file tree structure from an array of file objects.\",\n      \"input\": \"Array of file objects, each containing a 'path' and 'type'.\",\n      \"output\": \"A nested object representing the file tree.\"\n    },\n    {\n      \"name\": \"sortFileTree\",\n      \"purpose\": \"Sorts the children of a file tree node by type and name.\",\n      \"input\": \"A file tree node.\",\n      \"output\": \"A sorted file tree node.\"\n    }\n  ],\n  \"exports\": [\n    \"buildFileTree\"\n  ],\n  \"dependencies\": [],\n  \"finalReturnType(s)\": \"Object representing the sorted file tree.\"\n}"
    },
    {
      "path": "backend/src/utils/github.js",
      "metadata": "{\n  \"name\": \"github.js\",\n  \"path\": \"backend/src/utils/github.js\",\n  \"imports\": [],\n  \"mainPurpose\": \"To parse a GitHub repository URL and extract the owner and repository name.\",\n  \"type\": \"module\",\n  \"functions\": [\n    {\n      \"name\": \"parseGitHubUrl\",\n      \"purpose\": \"Extracts the owner and repository name from a given GitHub URL.\",\n      \"input\": \"A string representing a GitHub repository URL.\",\n      \"output\": \"An object containing the owner and repo name.\"\n    }\n  ],\n  \"exports\": [\"parseGitHubUrl\"],\n  \"dependencies\": [],\n  \"finalReturnType(s)\": \"Object\"\n}"
    },
    {
      "path": "frontend/src/App.jsx",
      "metadata": "{\n  \"name\": \"App\",\n  \"path\": \"frontend/src/App.jsx\",\n  \"imports\": [\n    \"useState from 'react'\",\n    \"'./App.css'\"\n  ],\n  \"mainPurpose\": \"To provide a user interface for analyzing GitHub repositories and downloading analysis results.\",\n  \"type\": \"Functional Component\",\n  \"functions\": [\n    {\n      \"name\": \"handleSubmit\",\n      \"purpose\": \"Handles form submission to analyze the repository.\",\n      \"input\": \"Event object from form submission.\",\n      \"output\": \"Updates logs and analysis completion state based on the response from the backend.\"\n    },\n    {\n      \"name\": \"handleDownload\",\n      \"purpose\": \"Handles the download of the analysis results.\",\n      \"input\": \"None.\",\n      \"output\": \"Triggers a download of the analysis results file.\"\n    }\n  ],\n  \"exports\": [\n    \"App\"\n  ],\n  \"dependencies\": [\n    \"useState\"\n  ],\n  \"finalReturnType(s)\": \"JSX element representing the application UI.\"\n}"
    },
    {
      "path": "frontend/src/main.jsx",
      "metadata": "{\n  \"name\": \"main.jsx\",\n  \"path\": \"frontend/src/main.jsx\",\n  \"imports\": [\n    \"StrictMode from 'react'\",\n    \"createRoot from 'react-dom/client'\",\n    \"'./index.css'\",\n    \"App from './App.jsx'\"\n  ],\n  \"mainPurpose\": \"Entry point for the React application, rendering the main App component within a StrictMode context.\",\n  \"type\": \"JavaScript\",\n  \"functions\": [],\n  \"exports\": [],\n  \"dependencies\": [\n    \"react\",\n    \"react-dom\"\n  ],\n  \"finalReturnType(s)\": \"React element\"\n}"
    },
    {
      "path": "frontend/vite.config.js",
      "metadata": "{\n  \"name\": \"vite.config.js\",\n  \"path\": \"frontend/vite.config.js\",\n  \"imports\": [\n    {\n      \"module\": \"vite\",\n      \"imported\": \"defineConfig\"\n    },\n    {\n      \"module\": \"@vitejs/plugin-react\",\n      \"imported\": \"react\"\n    }\n  ],\n  \"mainPurpose\": \"Configuration file for Vite, a build tool for modern web projects, specifically for a React application.\",\n  \"type\": \"configuration\",\n  \"functions\": [],\n  \"exports\": [\n    \"default\"\n  ],\n  \"dependencies\": [\n    \"vite\",\n    \"@vitejs/plugin-react\"\n  ],\n  \"finalReturnType(s)\": \"Object\"\n}"
    }
  ],
  "callHierarchy": "Here's the call hierarchy for the **RepoSage** project, showing the main execution flow, important function calls between files, and dependencies between modules.\n\n### Call Hierarchy\n\n```plaintext\n📁 analyzeRepository(repoUrl: string) → Promise { metadata, fileTree, analysisResults } [backend/src/analyzer.js]\n├─ 🔷 parseGitHubUrl(url: string) → { owner: string, repo: string } [backend/src/utils/github.js]\n├─ 🔷 buildFileTree(files: Array) → Object [backend/src/utils/fileTree.js]\n│   ├─ 🟢 sortFileTree(node: Object) → Object [backend/src/utils/fileTree.js]\n│   └─ 🟣 formatFileTree(node: Object, indent: string, repoUrl: string, branch: string, parentPath: string) → string [backend/src/utils/file.js]\n├─ 🔷 analyzeProjectStructure(openai: OpenAI, repoData: Object, files: Array, readmeContent: string) → Promise<string> [backend/src/analyzer.js]\n├─ 🔷 summarizeContent(openai: OpenAI, content: string, fileTree: Array) → Promise<string> [backend/src/analyzer.js]\n├─ 🔷 analyzeCode(openai: OpenAI, filePath: string, content: string, fileTree: Array) → Promise<Object> [backend/src/analyzer.js]\n└─ 🔶 analyzeCallHierarchy(openai: OpenAI, fileMetadata: Array, projectUnderstanding: string) → Promise<string> [backend/src/analyzer.js]\n    └─ 🔴 generateSummary(openai: OpenAI, analysis: Object) → Promise<string> [backend/src/analyzer.js]\n\n📁 sendUpdate(message: string) → void [backend/index.js]\n\n📁 displayResults(analysis: Object) → None [backend/src/utils/display.js]\n└─ 🔷 displayFileTree(node: Object, indent: string) → None [backend/src/utils/display.js]\n\n📁 saveToFile(filename: string, analysis: Object) → Promise<void> [backend/src/utils/file.js]\n\n📁 handleSubmit(event: Event) → void [frontend/src/App.jsx]\n└─ 🔷 fetchAnalysis(repoUrl: string) → Promise<Object> [frontend/src/App.jsx]\n\n📁 main() → React element [frontend/src/main.jsx]\n└─ 🔷 App() → JSX element [frontend/src/App.jsx]\n```\n\n### Explanation of the Call Hierarchy\n\n1. **Entry Point**:\n   - The entry point for the backend is `backend/index.js`, which sets up the Express server and handles API requests. The main function here is `sendUpdate(message: string)` which sends updates to the client during the analysis process.\n\n2. **Main Execution Flow**:\n   - The main execution flow starts with the `analyzeRepository(repoUrl: string)` function in `backend/src/analyzer.js`. This function orchestrates the analysis of a GitHub repository by calling various helper functions to parse the URL, build the file tree, analyze the project structure, and generate summaries.\n\n3. **Important Function Calls**:\n   - The `analyzeRepository` function calls several other functions:\n     - `parseGitHubUrl` to extract the owner and repository name from the provided URL.\n     - `buildFileTree` to create a hierarchical representation of the files in the repository.\n     - `analyzeProjectStructure`, `summarizeContent`, and `analyzeCode` to perform deeper analysis on the repository's content.\n     - `analyzeCallHierarchy` to analyze the call hierarchy based on the project understanding and file metadata.\n\n4. **Dependencies Between Modules**:\n   - The `analyzeRepository` function relies on utility functions from `github.js`, `fileTree.js`, and `file.js` for parsing, building structures, and formatting.\n   - The `displayResults` function in `display.js` is used to output the analysis results to the console.\n   - The frontend component `App` handles user interactions and calls the backend API to fetch analysis results.\n\nThis structured call hierarchy provides a clear view of how the application flows from the entry point through various files and functions, highlighting the important function calls and dependencies between modules."
}