{
  "repository": {
    "name": "github-repo-bot",
    "description": "A tool to help understand Github repositories, file by file with Call Hierarchy and Summary of the project.",
    "language": "JavaScript"
  },
  "fileMetadata": [
    {
      "path": "LICENSE",
      "metadata": "{\n  \"name\": \"LICENSE\",\n  \"path\": \"LICENSE\",\n  \"imports\": [],\n  \"mainPurpose\": \"Defines the legal terms under which the software can be used, modified, and distributed.\",\n  \"type\": \"Legal Document\",\n  \"functions\": [],\n  \"exports\": [],\n  \"dependencies\": [],\n  \"finalReturnType(s)\": \"None\"\n}"
    },
    {
      "path": "backend/index.js",
      "metadata": "```json\n{\n  \"name\": \"index.js\",\n  \"path\": \"backend/index.js\",\n  \"imports\": [\n    \"express\",\n    \"cors\",\n    \"@octokit/rest\",\n    \"openai\",\n    \"fs.promises\",\n    \"path\"\n  ],\n  \"mainPurpose\": \"Sets up an Express server to analyze GitHub repositories using the GitHub API and OpenAI API, then returns a structured analysis.\",\n  \"type\": \"Backend API Server\",\n  \"functions\": [\n    {\n      \"name\": \"sendUpdate\",\n      \"purpose\": \"Streams real-time updates to the client during the analysis process.\",\n      \"input\": \"message (string)\",\n      \"output\": \"Writes message to response stream\"\n    }\n  ],\n  \"exports\": [],\n  \"dependencies\": [\n    \"express\",\n    \"cors\",\n    \"@octokit/rest\",\n    \"openai\",\n    \"fs\",\n    \"path\"\n  ],\n  \"finalReturnType(s)\": \"HTTP response containing repository analysis in markdown format\"\n}\n```"
    },
    {
      "path": "backend/src/analyzer.js",
      "metadata": "Here is the JSON structure containing essential technical information about `backend/src/analyzer.js`:  \n\n```json\n{\n  \"name\": \"analyzer.js\",\n  \"path\": \"backend/src/analyzer.js\",\n  \"imports\": [\n    \"octokit\",\n    \"openai\",\n    \"chalk\",\n    \"fs\",\n    \"path\",\n    \"fileURLToPath\",\n    \"dirname\",\n    \"resolve\",\n    \"./utils/github.js\",\n    \"./utils/fileTree.js\"\n  ],\n  \"mainPurpose\": \"This module is responsible for analyzing a GitHub repository by fetching metadata, file structures, and performing AI-based analysis using OpenAI models.\",\n  \"type\": \"JavaScript (Node.js) module\",\n  \"functions\": [\n    {\n      \"name\": \"createChatCompletion\",\n      \"purpose\": \"Creates a chat completion request using OpenAI's API based on the provided model type and analysis prompt.\",\n      \"input\": \"openai (OpenAI instance), model (string), modelType (string), analysisPrompt (string)\",\n      \"output\": \"AI-generated response from OpenAI's chat completion API\"\n    },\n    {\n      \"name\": \"saveApiCallContent\",\n      \"purpose\": \"Saves API call responses to a log file for debugging and record-keeping.\",\n      \"input\": \"functionName (string), content (string)\",\n      \"output\": \"Writes content to 'apiResponsesLog.txt'\"\n    },\n    {\n      \"name\": \"analyzeRepository\",\n      \"purpose\": \"Analyzes a given GitHub repository by fetching metadata, file structure, and performing AI-based analysis.\",\n      \"input\": \"repoUrl (string)\",\n      \"output\": \"Returns an object containing repository metadata, file analysis, project understanding, and summary\"\n    },\n    {\n      \"name\": \"analyzeProjectStructure\",\n      \"purpose\": \"Analyzes the project structure using OpenAI to understand its components, tech stack, and architecture.\",\n      \"input\": \"openai (OpenAI instance), repoData (object), files (array), readmeContent (string)\",\n      \"output\": \"AI-generated textual analysis of the project structure\"\n    },\n    {\n      \"name\": \"smartFileFilter\",\n      \"purpose\": \"Filters and selects the most relevant files for analysis using OpenAI.\",\n      \"input\": \"files (array), projectUnderstanding (string)\",\n      \"output\": \"Filtered list of important files\"\n    },\n    {\n      \"name\": \"summarizeContent\",\n      \"purpose\": \"Summarizes the key aspects of a given file's content using OpenAI.\",\n      \"input\": \"openai (OpenAI instance), content (string), fileTree (array)\",\n      \"output\": \"AI-generated summary of the file content\"\n    },\n    {\n      \"name\": \"analyzeCode\",\n      \"purpose\": \"Analyzes a given code file and extracts insights such as purpose, functions, and interactions.\",\n      \"input\": \"openai (OpenAI instance), filePath (string), content (string), fileTree (array)\",\n      \"output\": \"Object containing human-readable analysis and JSON metadata of the file\"\n    },\n    {\n      \"name\": \"analyzeCallHierarchy\",\n      \"purpose\": \"Analyzes the function call hierarchy within the project using OpenAI.\",\n      \"input\": \"openai (OpenAI instance), fileMetadata (array), projectUnderstanding (string)\",\n      \"output\": \"AI-generated call hierarchy representation\"\n    },\n    {\n      \"name\": \"generateSummary\",\n      \"purpose\": \"Generates a high-level summary of the project based on its metadata and analysis.\",\n      \"input\": \"openai (OpenAI instance), analysis (object)\",\n      \"output\": \"AI-generated project summary\"\n    }\n  ],\n  \"exports\": [\n    \"analyzeRepository\"\n  ],\n  \"dependencies\": [\n    \"octokit\",\n    \"openai\",\n    \"chalk\",\n    \"fs\",\n    \"path\"\n  ],\n  \"finalReturnType(s)\": \"Object containing repository metadata, file analysis, project understanding, and summary\"\n}\n```\n\nThis JSON provides a structured overview of the file, including its purpose, dependencies, functions, and outputs. Let me know if you need further refinements! ðŸš€"
    },
    {
      "path": "backend/src/index.js",
      "metadata": "```json\n{\n  \"name\": \"index.js\",\n  \"path\": \"backend/src/index.js\",\n  \"imports\": [\n    \"express\",\n    \"cors\",\n    \"dotenv\",\n    \"./analyzer.js\",\n    \"./utils/display.js\",\n    \"./utils/file.js\",\n    \"fs/promises\",\n    \"path\",\n    \"url\"\n  ],\n  \"mainPurpose\": \"Sets up an Express server to handle API requests for analyzing GitHub repositories and serving analysis results.\",\n  \"type\": \"Express server application\",\n  \"functions\": [\n    {\n      \"name\": \"stripAnsiCodes\",\n      \"purpose\": \"Removes ANSI color codes from a string.\",\n      \"input\": \"string\",\n      \"output\": \"string\"\n    }\n  ],\n  \"exports\": [],\n  \"dependencies\": [\n    \"express\",\n    \"cors\",\n    \"dotenv\",\n    \"fs/promises\",\n    \"path\",\n    \"url\"\n  ],\n  \"finalReturnType(s)\": \"Express server instance\"\n}\n```"
    },
    {
      "path": "backend/src/utils/display.js",
      "metadata": "{\n  \"name\": \"display.js\",\n  \"path\": \"backend/src/utils/display.js\",\n  \"imports\": [\"chalk\"],\n  \"mainPurpose\": \"Provides functions to display analysis results in a formatted and readable manner using console output.\",\n  \"type\": \"utility module\",\n  \"functions\": [\n    {\n      \"name\": \"displayResults\",\n      \"purpose\": \"Displays the analysis results including repository information, summary, project structure, call hierarchy, and file analyses in a formatted console output.\",\n      \"input\": \"analysis (object containing repository details, summary, file tree, call hierarchy, and file analyses)\",\n      \"output\": \"Formatted console output displaying analysis results\"\n    },\n    {\n      \"name\": \"displayFileTree\",\n      \"purpose\": \"Recursively prints the project file structure in a formatted manner.\",\n      \"input\": \"node (object representing a file or directory in the file tree), indent (string for indentation formatting)\",\n      \"output\": \"Formatted console output displaying the project file structure\"\n    }\n  ],\n  \"exports\": [\"displayResults\"],\n  \"dependencies\": [\"chalk\"],\n  \"finalReturnType(s)\": \"void (console output only)\"\n}"
    },
    {
      "path": "backend/src/utils/file.js",
      "metadata": "{\n  \"name\": \"file.js\",\n  \"path\": \"backend/src/utils/file.js\",\n  \"imports\": [\"fs/promises\"],\n  \"mainPurpose\": \"Handles saving analysis results to markdown and JSON files, and provides utility functions for file path formatting.\",\n  \"type\": \"Utility Module\",\n  \"functions\": [\n    {\n      \"name\": \"saveToFile\",\n      \"purpose\": \"Saves analysis results to a markdown file and a JSON metadata file.\",\n      \"input\": \"filename (string), analysis (object)\",\n      \"output\": \"Writes files asynchronously, no direct return value.\"\n    },\n    {\n      \"name\": \"formatFileTree\",\n      \"purpose\": \"Formats a file tree structure into a readable markdown format with GitHub links.\",\n      \"input\": \"node (object), indent (string), repoUrl (string), branch (string), parentPath (string, optional)\",\n      \"output\": \"Formatted markdown string representing the file tree.\"\n    },\n    {\n      \"name\": \"getFullPath\",\n      \"purpose\": \"Constructs the full path of a file or directory from a node structure.\",\n      \"input\": \"node (object)\",\n      \"output\": \"String representing the full file path.\"\n    }\n  ],\n  \"exports\": [\"saveToFile\", \"formatFileTree\", \"getFullPath\"],\n  \"dependencies\": [\"fs/promises\"],\n  \"finalReturnType(s)\": \"None (functions perform file operations or return formatted strings)\"\n}"
    },
    {
      "path": "backend/src/utils/fileTree.js",
      "metadata": "{\n  \"name\": \"fileTree.js\",\n  \"path\": \"backend/src/utils/fileTree.js\",\n  \"imports\": [],\n  \"mainPurpose\": \"Constructs and sorts a hierarchical file tree structure from a list of file paths.\",\n  \"type\": \"utility module\",\n  \"functions\": [\n    {\n      \"name\": \"buildFileTree\",\n      \"purpose\": \"Builds a hierarchical file tree structure from an array of file objects.\",\n      \"input\": \"Array of file objects with 'path' and 'type' properties.\",\n      \"output\": \"A nested object representing the file tree structure.\"\n    },\n    {\n      \"name\": \"sortFileTree\",\n      \"purpose\": \"Sorts the file tree structure by placing directories first and sorting alphabetically.\",\n      \"input\": \"A file tree node object.\",\n      \"output\": \"A sorted file tree node object.\"\n    }\n  ],\n  \"exports\": [\"buildFileTree\"],\n  \"dependencies\": [],\n  \"finalReturnType(s)\": \"Object representing a sorted file tree structure.\"\n}"
    },
    {
      "path": "backend/src/utils/github.js",
      "metadata": "{\n  \"name\": \"github.js\",\n  \"path\": \"backend/src/utils/github.js\",\n  \"imports\": [\"URL\"],\n  \"mainPurpose\": \"Parses a GitHub repository URL and extracts the owner and repository name.\",\n  \"type\": \"utility module\",\n  \"functions\": [\n    {\n      \"name\": \"parseGitHubUrl\",\n      \"purpose\": \"Extracts the owner and repository name from a GitHub repository URL.\",\n      \"input\": \"GitHub repository URL as a string\",\n      \"output\": \"An object containing 'owner' and 'repo' properties\"\n    }\n  ],\n  \"exports\": [\"parseGitHubUrl\"],\n  \"dependencies\": [],\n  \"finalReturnType(s)\": \"Object with 'owner' and 'repo' properties\"\n}"
    },
    {
      "path": "frontend/eslint.config.js",
      "metadata": "{\n  \"name\": \"eslint.config.js\",\n  \"path\": \"frontend/eslint.config.js\",\n  \"imports\": [\n    \"@eslint/js\",\n    \"globals\",\n    \"eslint-plugin-react\",\n    \"eslint-plugin-react-hooks\",\n    \"eslint-plugin-react-refresh\"\n  ],\n  \"mainPurpose\": \"Configures ESLint rules and settings for the frontend project, including React-specific linting.\",\n  \"type\": \"ESLint Configuration File\",\n  \"functions\": [],\n  \"exports\": [\n    \"ESLint configuration array\"\n  ],\n  \"dependencies\": [\n    \"@eslint/js\",\n    \"globals\",\n    \"eslint-plugin-react\",\n    \"eslint-plugin-react-hooks\",\n    \"eslint-plugin-react-refresh\"\n  ],\n  \"finalReturnType(s)\": \"Array\"\n}"
    },
    {
      "path": "frontend/index.html",
      "metadata": "{\n  \"name\": \"index.html\",\n  \"path\": \"frontend/index.html\",\n  \"imports\": [\"/src/main.jsx\"],\n  \"mainPurpose\": \"Entry point for the frontend, setting up the root container for the React application.\",\n  \"type\": \"HTML\",\n  \"functions\": [],\n  \"exports\": [],\n  \"dependencies\": [],\n  \"finalReturnType(s)\": \"HTML document\"\n}"
    },
    {
      "path": "frontend/src/App.jsx",
      "metadata": "{\n  \"name\": \"App\",\n  \"path\": \"frontend/src/App.jsx\",\n  \"imports\": [\n    {\n      \"module\": \"react\",\n      \"imports\": [\"useState\"]\n    },\n    {\n      \"module\": \"./App.css\",\n      \"imports\": []\n    }\n  ],\n  \"mainPurpose\": \"Provides the main UI for the GitHub Repo Analyzer, allowing users to input repository details, trigger analysis, and download results.\",\n  \"type\": \"React Functional Component\",\n  \"functions\": [\n    {\n      \"name\": \"handleSubmit\",\n      \"purpose\": \"Handles form submission, sends repository details to the backend for analysis, and processes streamed response logs.\",\n      \"input\": \"event (form submit event)\",\n      \"output\": \"Updates state variables (logs, isLoading, analysisComplete)\"\n    },\n    {\n      \"name\": \"handleDownload\",\n      \"purpose\": \"Triggers the download of the analysis results from the backend.\",\n      \"input\": \"None\",\n      \"output\": \"Downloads a file named 'analysis_results.md'\"\n    }\n  ],\n  \"exports\": [\"App\"],\n  \"dependencies\": [\"react\", \"fetch API\"],\n  \"finalReturnType(s)\": \"JSX (React Component)\"\n}"
    },
    {
      "path": "frontend/src/main.jsx",
      "metadata": "```json\n{\n  \"name\": \"main.jsx\",\n  \"path\": \"frontend/src/main.jsx\",\n  \"imports\": [\n    {\n      \"module\": \"react\",\n      \"imports\": [\"StrictMode\"]\n    },\n    {\n      \"module\": \"react-dom/client\",\n      \"imports\": [\"createRoot\"]\n    },\n    {\n      \"module\": \"./index.css\",\n      \"imports\": []\n    },\n    {\n      \"module\": \"./App.jsx\",\n      \"imports\": [\"App\"]\n    }\n  ],\n  \"mainPurpose\": \"Entry point for the React application, rendering the root component into the DOM.\",\n  \"type\": \"React entry file\",\n  \"functions\": [\n    {\n      \"name\": \"render\",\n      \"purpose\": \"Renders the root React component into the DOM.\",\n      \"input\": \"React component tree\",\n      \"output\": \"Rendered React application in the DOM\"\n    }\n  ],\n  \"exports\": [],\n  \"dependencies\": [\"react\", \"react-dom\"],\n  \"finalReturnType(s)\": \"Rendered React application\"\n}\n```"
    },
    {
      "path": "frontend/vite.config.js",
      "metadata": "{\n  \"name\": \"vite.config.js\",\n  \"path\": \"frontend/vite.config.js\",\n  \"imports\": [\"vite\", \"@vitejs/plugin-react\"],\n  \"mainPurpose\": \"Configuration file for Vite, specifying plugins and settings for the frontend build process.\",\n  \"type\": \"Configuration\",\n  \"functions\": [\n    {\n      \"name\": \"defineConfig\",\n      \"purpose\": \"Defines and exports the Vite configuration.\",\n      \"input\": \"Configuration object\",\n      \"output\": \"Vite configuration object\"\n    }\n  ],\n  \"exports\": [\"defineConfig\"],\n  \"dependencies\": [\"vite\", \"@vitejs/plugin-react\"],\n  \"finalReturnType(s)\": \"Vite configuration object\"\n}"
    }
  ],
  "callHierarchy": ""
}