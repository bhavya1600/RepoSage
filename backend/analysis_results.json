{
  "repository": {
    "name": "RepoSage",
    "description": "A tool to help understand Github repositories, file by file with Call Hierarchy and Summary of the project.",
    "language": "JavaScript"
  },
  "fileMetadata": [
    {
      "path": "backend/index.js",
      "metadata": "```json\n{\n  \"name\": \"index.js\",\n  \"path\": \"backend/index.js\",\n  \"imports\": [\n    \"express\",\n    \"cors\",\n    \"@octokit/rest\",\n    \"openai\",\n    \"fs.promises\",\n    \"path\"\n  ],\n  \"mainPurpose\": \"Sets up an Express server to analyze GitHub repositories using GitHub API and OpenAI API.\",\n  \"type\": \"Express server\",\n  \"functions\": [\n    {\n      \"name\": \"sendUpdate\",\n      \"purpose\": \"Sends real-time updates to the client during the analysis process.\",\n      \"input\": \"message (string)\",\n      \"output\": \"Writes message to response stream\"\n    }\n  ],\n  \"exports\": [],\n  \"dependencies\": [\n    \"express\",\n    \"cors\",\n    \"@octokit/rest\",\n    \"openai\",\n    \"fs\",\n    \"path\"\n  ],\n  \"finalReturnType(s)\": \"HTTP response with GitHub repository analysis in markdown format\"\n}\n```"
    },
    {
      "path": "backend/src/analyzer.js",
      "metadata": "Here is the JSON structure containing essential technical information for the provided `backend/src/analyzer.js` file:\n\n```json\n{\n  \"name\": \"analyzer.js\",\n  \"path\": \"backend/src/analyzer.js\",\n  \"imports\": [\n    \"octokit\",\n    \"openai\",\n    \"chalk\",\n    \"fs\",\n    \"path\",\n    \"fileURLToPath\",\n    \"dirname\",\n    \"resolve\",\n    \"./utils/github.js\",\n    \"./utils/fileTree.js\"\n  ],\n  \"mainPurpose\": \"This module analyzes a GitHub repository by fetching metadata, file structure, and relevant files, then processes them using OpenAI for insights and summaries.\",\n  \"type\": \"Backend analysis module\",\n  \"functions\": [\n    {\n      \"name\": \"createChatCompletion\",\n      \"purpose\": \"Generates a chat completion response using OpenAI based on the provided model type and prompt.\",\n      \"input\": \"openai (OpenAI instance), model (string), modelType (string), analysisPrompt (string)\",\n      \"output\": \"AI-generated response object\"\n    },\n    {\n      \"name\": \"saveApiCallContent\",\n      \"purpose\": \"Saves API call responses to a log file for debugging and reference.\",\n      \"input\": \"functionName (string), content (string)\",\n      \"output\": \"Writes content to 'apiResponsesLog.txt'\"\n    },\n    {\n      \"name\": \"analyzeRepository\",\n      \"purpose\": \"Fetches repository metadata, file tree, and analyzes key files using OpenAI to generate insights.\",\n      \"input\": \"repoUrl (string)\",\n      \"output\": \"Analysis object containing repository details, file metadata, project understanding, and summaries\"\n    },\n    {\n      \"name\": \"analyzeProjectStructure\",\n      \"purpose\": \"Analyzes the repository's file structure and README to determine the project's purpose and tech stack.\",\n      \"input\": \"openai (OpenAI instance), repoData (object), files (array), readmeContent (string)\",\n      \"output\": \"String summary of project structure\"\n    },\n    {\n      \"name\": \"smartFileFilter\",\n      \"purpose\": \"Filters out non-essential files and selects the most relevant files for analysis using OpenAI.\",\n      \"input\": \"files (array), projectUnderstanding (string)\",\n      \"output\": \"Array of essential file objects\"\n    },\n    {\n      \"name\": \"summarizeContent\",\n      \"purpose\": \"Summarizes a given file's content using OpenAI to extract key insights.\",\n      \"input\": \"openai (OpenAI instance), content (string), fileTree (array)\",\n      \"output\": \"String summary of the file\"\n    },\n    {\n      \"name\": \"analyzeCode\",\n      \"purpose\": \"Analyzes a code file to generate a human-readable explanation and structured metadata.\",\n      \"input\": \"openai (OpenAI instance), filePath (string), content (string), fileTree (array)\",\n      \"output\": \"Object containing text analysis and JSON metadata\"\n    },\n    {\n      \"name\": \"analyzeCallHierarchy\",\n      \"purpose\": \"Generates a call hierarchy of the project, mapping function calls and dependencies.\",\n      \"input\": \"openai (OpenAI instance), fileMetadata (array), projectUnderstanding (string)\",\n      \"output\": \"String representation of the call hierarchy\"\n    },\n    {\n      \"name\": \"generateSummary\",\n      \"purpose\": \"Creates a structured summary of the project based on analyzed data.\",\n      \"input\": \"openai (OpenAI instance), analysis (object)\",\n      \"output\": \"String summary of the project\"\n    }\n  ],\n  \"exports\": [\n    \"analyzeRepository\"\n  ],\n  \"dependencies\": [\n    \"octokit\",\n    \"openai\",\n    \"chalk\",\n    \"fs\",\n    \"path\"\n  ],\n  \"finalReturnType(s)\": \"Object containing repository analysis, file metadata, project understanding, and summaries\"\n}\n```\n\nThis JSON provides a structured breakdown of the `analyzer.js` file, including its purpose, functions, dependencies, and outputs. Let me know if you need further refinements! ðŸš€"
    },
    {
      "path": "backend/src/index.js",
      "metadata": "{\n  \"name\": \"index.js\",\n  \"path\": \"backend/src/index.js\",\n  \"imports\": [\n    \"express\",\n    \"cors\",\n    \"dotenv\",\n    \"./analyzer.js\",\n    \"./utils/display.js\",\n    \"./utils/file.js\",\n    \"fs/promises\",\n    \"path\",\n    \"url\"\n  ],\n  \"mainPurpose\": \"Sets up an Express server to handle API requests for analyzing GitHub repositories and serving analysis results.\",\n  \"type\": \"Express server application\",\n  \"functions\": [\n    {\n      \"name\": \"stripAnsiCodes\",\n      \"purpose\": \"Removes ANSI color codes from a given string.\",\n      \"input\": \"string\",\n      \"output\": \"string\"\n    }\n  ],\n  \"exports\": [],\n  \"dependencies\": [\n    \"express\",\n    \"cors\",\n    \"dotenv\",\n    \"fs\",\n    \"path\",\n    \"url\"\n  ],\n  \"finalReturnType(s)\": \"Express server instance\"\n}"
    },
    {
      "path": "backend/src/utils/display.js",
      "metadata": "{\n  \"name\": \"display.js\",\n  \"path\": \"backend/src/utils/display.js\",\n  \"imports\": [\"chalk\"],\n  \"mainPurpose\": \"Provides functions to display analysis results in a formatted manner using console output.\",\n  \"type\": \"Utility Module\",\n  \"functions\": [\n    {\n      \"name\": \"displayResults\",\n      \"purpose\": \"Displays formatted analysis results including repository information, summary, project structure, call hierarchy, and file analyses.\",\n      \"input\": \"analysis (object containing repository details, summary, file tree, call hierarchy, and file analyses)\",\n      \"output\": \"Console output of formatted analysis results\"\n    },\n    {\n      \"name\": \"displayFileTree\",\n      \"purpose\": \"Recursively prints the project file tree structure in a formatted manner.\",\n      \"input\": \"node (object representing a file or directory), indent (string for indentation formatting)\",\n      \"output\": \"Console output of formatted file tree structure\"\n    }\n  ],\n  \"exports\": [\"displayResults\"],\n  \"dependencies\": [\"chalk\"],\n  \"finalReturnType(s)\": \"void (console output only)\"\n}"
    },
    {
      "path": "backend/src/utils/file.js",
      "metadata": "{\n  \"name\": \"file.js\",\n  \"path\": \"backend/src/utils/file.js\",\n  \"imports\": [\"fs/promises\"],\n  \"mainPurpose\": \"Handles saving analysis results to markdown and JSON files, and provides utility functions for file path formatting.\",\n  \"type\": \"Utility Module\",\n  \"functions\": [\n    {\n      \"name\": \"saveToFile\",\n      \"purpose\": \"Saves analysis results to a markdown file and a corresponding JSON file.\",\n      \"input\": \"filename (string), analysis (object)\",\n      \"output\": \"Writes markdown and JSON files asynchronously.\"\n    },\n    {\n      \"name\": \"formatFileTree\",\n      \"purpose\": \"Formats a file tree structure into a markdown-friendly representation with GitHub links.\",\n      \"input\": \"node (object), indent (string), repoUrl (string), branch (string), parentPath (string, optional)\",\n      \"output\": \"Formatted markdown string representing the file tree.\"\n    },\n    {\n      \"name\": \"getFullPath\",\n      \"purpose\": \"Constructs the full path of a file or directory node, removing unnecessary 'root/' prefixes.\",\n      \"input\": \"node (object)\",\n      \"output\": \"Full file path as a string.\"\n    }\n  ],\n  \"exports\": [\"saveToFile\", \"formatFileTree\", \"getFullPath\"],\n  \"dependencies\": [\"fs/promises\"],\n  \"finalReturnType(s)\": [\"void (writes to files)\", \"string (formatted file paths)\"]\n}"
    },
    {
      "path": "backend/src/utils/fileTree.js",
      "metadata": "{\n  \"name\": \"fileTree.js\",\n  \"path\": \"backend/src/utils/fileTree.js\",\n  \"imports\": [],\n  \"mainPurpose\": \"Constructs a hierarchical file tree structure from a list of file paths and sorts it.\",\n  \"type\": \"utility module\",\n  \"functions\": [\n    {\n      \"name\": \"buildFileTree\",\n      \"purpose\": \"Builds a nested file tree structure from an array of file objects.\",\n      \"input\": \"Array of file objects with 'path' and 'type' properties.\",\n      \"output\": \"A hierarchical file tree object with directories and files.\"\n    },\n    {\n      \"name\": \"sortFileTree\",\n      \"purpose\": \"Recursively sorts the file tree, placing directories before files and sorting alphabetically.\",\n      \"input\": \"A file tree node object.\",\n      \"output\": \"A sorted file tree node object.\"\n    }\n  ],\n  \"exports\": [\"buildFileTree\"],\n  \"dependencies\": [],\n  \"finalReturnType(s)\": \"Object representing a sorted hierarchical file tree.\"\n}"
    },
    {
      "path": "backend/src/utils/github.js",
      "metadata": "{\n  \"name\": \"github.js\",\n  \"path\": \"backend/src/utils/github.js\",\n  \"imports\": [],\n  \"mainPurpose\": \"Parses a GitHub repository URL and extracts the owner and repository name.\",\n  \"type\": \"utility module\",\n  \"functions\": [\n    {\n      \"name\": \"parseGitHubUrl\",\n      \"purpose\": \"Extracts the owner and repository name from a GitHub repository URL.\",\n      \"input\": \"A string representing a GitHub repository URL.\",\n      \"output\": \"An object containing 'owner' and 'repo' properties.\"\n    }\n  ],\n  \"exports\": [\"parseGitHubUrl\"],\n  \"dependencies\": [\"URL (built-in Node.js API)\"],\n  \"finalReturnType(s)\": \"Object { owner: string, repo: string }\"\n}"
    },
    {
      "path": "frontend/index.html",
      "metadata": "{\n  \"name\": \"index.html\",\n  \"path\": \"frontend/index.html\",\n  \"imports\": [\"/src/main.jsx\"],\n  \"mainPurpose\": \"Entry point for the frontend application, setting up the root container and linking the main JavaScript file.\",\n  \"type\": \"HTML Document\",\n  \"functions\": [],\n  \"exports\": [],\n  \"dependencies\": [],\n  \"finalReturnType(s)\": \"Rendered HTML structure\"\n}"
    },
    {
      "path": "frontend/src/App.jsx",
      "metadata": "```json\n{\n  \"name\": \"App\",\n  \"path\": \"frontend/src/App.jsx\",\n  \"imports\": [\n    {\n      \"module\": \"react\",\n      \"imports\": [\"useState\"]\n    },\n    {\n      \"module\": \"./App.css\",\n      \"imports\": []\n    }\n  ],\n  \"mainPurpose\": \"Renders a UI for analyzing GitHub repositories using OpenAI and GitHub API tokens, allowing users to submit a repository URL, view progress logs, and download analysis results.\",\n  \"type\": \"React Functional Component\",\n  \"functions\": [\n    {\n      \"name\": \"handleSubmit\",\n      \"purpose\": \"Handles form submission, sends a request to the backend API to analyze the repository, processes streamed response logs, and updates the UI accordingly.\",\n      \"input\": \"Event object (e)\",\n      \"output\": \"None (updates state variables)\"\n    },\n    {\n      \"name\": \"handleDownload\",\n      \"purpose\": \"Handles downloading the analysis results from the backend API and saves them as a file.\",\n      \"input\": \"None\",\n      \"output\": \"None (triggers file download)\"\n    }\n  ],\n  \"exports\": [\"App\"],\n  \"dependencies\": [\"react\"],\n  \"finalReturnType(s)\": \"JSX\"\n}\n```"
    },
    {
      "path": "frontend/src/main.jsx",
      "metadata": "```json\n{\n  \"name\": \"main.jsx\",\n  \"path\": \"frontend/src/main.jsx\",\n  \"imports\": [\n    {\n      \"module\": \"react\",\n      \"imports\": [\"StrictMode\"]\n    },\n    {\n      \"module\": \"react-dom/client\",\n      \"imports\": [\"createRoot\"]\n    },\n    {\n      \"module\": \"./index.css\",\n      \"imports\": []\n    },\n    {\n      \"module\": \"./App.jsx\",\n      \"imports\": [\"App\"]\n    }\n  ],\n  \"mainPurpose\": \"Entry point for the React application, rendering the root component into the DOM.\",\n  \"type\": \"React Entry File\",\n  \"functions\": [],\n  \"exports\": [],\n  \"dependencies\": [\"react\", \"react-dom\"],\n  \"finalReturnType(s)\": \"React Component Render\"\n}\n```"
    },
    {
      "path": "frontend/vite.config.js",
      "metadata": "{\n  \"name\": \"vite.config.js\",\n  \"path\": \"frontend/vite.config.js\",\n  \"imports\": [\"vite\", \"@vitejs/plugin-react\"],\n  \"mainPurpose\": \"Configuration file for Vite, specifying plugins and settings for the frontend build process.\",\n  \"type\": \"Configuration\",\n  \"functions\": [\n    {\n      \"name\": \"defineConfig\",\n      \"purpose\": \"Defines and exports the Vite configuration.\",\n      \"input\": \"Configuration object\",\n      \"output\": \"Vite configuration object\"\n    }\n  ],\n  \"exports\": [\"default\"],\n  \"dependencies\": [\"vite\", \"@vitejs/plugin-react\"],\n  \"finalReturnType(s)\": \"Vite configuration object\"\n}"
    }
  ],
  "callHierarchy": ""
}