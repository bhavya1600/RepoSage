{
  "repository": {
    "name": "RepoSage",
    "description": "A tool to help understand Github repositories, file by file with Call Hierarchy and Summary of the project.",
    "language": "JavaScript"
  },
  "fileMetadata": [
    {
      "path": "backend/index.js",
      "metadata": "```json\n{\n  \"name\": \"index.js\",\n  \"path\": \"backend/index.js\",\n  \"imports\": [\n    \"express\",\n    \"cors\",\n    \"@octokit/rest\",\n    \"openai\",\n    \"fs.promises\",\n    \"path\"\n  ],\n  \"mainPurpose\": \"Sets up an Express server to analyze a GitHub repository using the GitHub API and OpenAI API.\",\n  \"type\": \"Backend API Server\",\n  \"functions\": [\n    {\n      \"name\": \"sendUpdate\",\n      \"purpose\": \"Sends real-time updates to the client via chunked response.\",\n      \"input\": \"message (string)\",\n      \"output\": \"Writes message to response stream.\"\n    }\n  ],\n  \"exports\": [],\n  \"dependencies\": [\n    \"express\",\n    \"cors\",\n    \"@octokit/rest\",\n    \"openai\",\n    \"fs\",\n    \"path\"\n  ],\n  \"finalReturnType(s)\": \"Express server response (JSON or text)\"\n}\n```"
    },
    {
      "path": "backend/src/analyzer.js",
      "metadata": "```json\n{\n  \"name\": \"analyzer.js\",\n  \"path\": \"backend/src/analyzer.js\",\n  \"imports\": [\n    \"octokit\",\n    \"openai\",\n    \"chalk\",\n    \"fs\",\n    \"path\",\n    \"fileURLToPath\",\n    \"dirname\",\n    \"resolve\",\n    \"./utils/github.js\",\n    \"./utils/fileTree.js\"\n  ],\n  \"mainPurpose\": \"Analyzes a GitHub repository by fetching its metadata, file structure, and relevant files, then processes the data using OpenAI to generate insights.\",\n  \"type\": \"Backend Utility Module\",\n  \"functions\": [\n    {\n      \"name\": \"createChatCompletion\",\n      \"purpose\": \"Creates a chat completion request to OpenAI based on the provided model type and prompt.\",\n      \"input\": \"openai instance, model name (string), modelType (string), analysisPrompt (string)\",\n      \"output\": \"OpenAI API response containing the generated text\"\n    },\n    {\n      \"name\": \"saveApiCallContent\",\n      \"purpose\": \"Saves API call responses to a log file for debugging and tracking purposes.\",\n      \"input\": \"functionName (string), content (string)\",\n      \"output\": \"Writes content to 'apiResponsesLog.txt'\"\n    },\n    {\n      \"name\": \"analyzeRepository\",\n      \"purpose\": \"Fetches repository metadata, file structure, and analyzes relevant files using OpenAI.\",\n      \"input\": \"repoUrl (string)\",\n      \"output\": \"An object containing repository metadata, file tree, project understanding, file analysis, file metadata, summary, and call hierarchy\"\n    },\n    {\n      \"name\": \"analyzeProjectStructure\",\n      \"purpose\": \"Analyzes the repository structure and generates a high-level understanding of the project.\",\n      \"input\": \"openai instance, repoData (object), files (array), readmeContent (string)\",\n      \"output\": \"String containing the project structure analysis\"\n    },\n    {\n      \"name\": \"smartFileFilter\",\n      \"purpose\": \"Filters out essential files for analysis using OpenAI, based on project structure and file types.\",\n      \"input\": \"files (array), projectUnderstanding (string)\",\n      \"output\": \"Array of filtered files considered essential for analysis\"\n    },\n    {\n      \"name\": \"summarizeContent\",\n      \"purpose\": \"Summarizes the key aspects of a given file's content.\",\n      \"input\": \"openai instance, content (string), fileTree (array)\",\n      \"output\": \"String containing the summarized content\"\n    },\n    {\n      \"name\": \"analyzeCode\",\n      \"purpose\": \"Analyzes a specific code file and generates both human-readable and structured JSON metadata.\",\n      \"input\": \"openai instance, filePath (string), content (string), fileTree (array)\",\n      \"output\": \"Object containing text analysis and JSON metadata\"\n    },\n    {\n      \"name\": \"analyzeCallHierarchy\",\n      \"purpose\": \"Generates a call hierarchy of the project based on file metadata and project understanding.\",\n      \"input\": \"openai instance, fileMetadata (array), projectUnderstanding (string)\",\n      \"output\": \"String containing the call hierarchy visualization\"\n    },\n    {\n      \"name\": \"generateSummary\",\n      \"purpose\": \"Generates a structured summary of the project based on analyzed data.\",\n      \"input\": \"openai instance, analysis (object)\",\n      \"output\": \"String containing the project summary\"\n    }\n  ],\n  \"exports\": [\n    \"analyzeRepository\"\n  ],\n  \"dependencies\": [\n    \"octokit\",\n    \"openai\",\n    \"chalk\",\n    \"fs\",\n    \"path\"\n  ],\n  \"finalReturnType(s)\": \"Object containing repository analysis, file metadata, and project summary\"\n}\n```"
    },
    {
      "path": "backend/src/index.js",
      "metadata": "{\n  \"name\": \"index.js\",\n  \"path\": \"backend/src/index.js\",\n  \"imports\": [\n    \"express\",\n    \"cors\",\n    \"dotenv\",\n    \"./analyzer.js\",\n    \"./utils/display.js\",\n    \"./utils/file.js\",\n    \"fs/promises\",\n    \"path\",\n    \"url\"\n  ],\n  \"mainPurpose\": \"Sets up an Express server to handle API endpoints for analyzing GitHub repositories and serving analysis results.\",\n  \"type\": \"Express server application\",\n  \"functions\": [\n    {\n      \"name\": \"stripAnsiCodes\",\n      \"purpose\": \"Removes ANSI color codes from a string.\",\n      \"input\": \"string\",\n      \"output\": \"string\"\n    }\n  ],\n  \"exports\": [],\n  \"dependencies\": [\n    \"express\",\n    \"cors\",\n    \"dotenv\",\n    \"fs\",\n    \"path\",\n    \"url\"\n  ],\n  \"finalReturnType(s)\": \"Express server instance\"\n}"
    },
    {
      "path": "backend/src/utils/display.js",
      "metadata": "{\n  \"name\": \"display.js\",\n  \"path\": \"backend/src/utils/display.js\",\n  \"imports\": [\"chalk\"],\n  \"mainPurpose\": \"Provides functions to display analysis results in a formatted and readable manner using console output.\",\n  \"type\": \"utility module\",\n  \"functions\": [\n    {\n      \"name\": \"displayResults\",\n      \"purpose\": \"Displays the analysis results including repository information, summary, project structure, call hierarchy, and file analyses in a formatted console output.\",\n      \"input\": \"analysis object containing repository details, summary, file tree, call hierarchy, and file analyses\",\n      \"output\": \"void (logs formatted analysis results to the console)\"\n    },\n    {\n      \"name\": \"displayFileTree\",\n      \"purpose\": \"Recursively prints the project file structure in a hierarchical format.\",\n      \"input\": \"node (file tree node), indent (string for indentation)\",\n      \"output\": \"void (logs formatted file tree to the console)\"\n    }\n  ],\n  \"exports\": [\"displayResults\"],\n  \"dependencies\": [\"chalk\"],\n  \"finalReturnType(s)\": \"void\"\n}"
    },
    {
      "path": "backend/src/utils/file.js",
      "metadata": "{\n  \"name\": \"file.js\",\n  \"path\": \"backend/src/utils/file.js\",\n  \"imports\": [\"fs/promises\"],\n  \"mainPurpose\": \"Handles file operations such as saving analysis results in markdown and JSON formats.\",\n  \"type\": \"Utility Module\",\n  \"functions\": [\n    {\n      \"name\": \"saveToFile\",\n      \"purpose\": \"Saves analysis data to a markdown file and a JSON metadata file.\",\n      \"input\": \"filename (string), analysis (object)\",\n      \"output\": \"Writes files asynchronously, returns a Promise.\"\n    },\n    {\n      \"name\": \"formatFileTree\",\n      \"purpose\": \"Formats the file tree structure into a readable markdown format with GitHub links.\",\n      \"input\": \"node (object), indent (string), repoUrl (string), branch (string), parentPath (string, optional)\",\n      \"output\": \"Formatted markdown string representing the file tree.\"\n    },\n    {\n      \"name\": \"getFullPath\",\n      \"purpose\": \"Retrieves the full path of a file or directory node.\",\n      \"input\": \"node (object)\",\n      \"output\": \"String representing the full path.\"\n    }\n  ],\n  \"exports\": [\"saveToFile\", \"formatFileTree\", \"getFullPath\"],\n  \"dependencies\": [\"fs/promises\"],\n  \"finalReturnType(s)\": [\"Promise<void>\", \"string\"]\n}"
    },
    {
      "path": "backend/src/utils/fileTree.js",
      "metadata": "{\n  \"name\": \"fileTree.js\",\n  \"path\": \"backend/src/utils/fileTree.js\",\n  \"imports\": [],\n  \"mainPurpose\": \"Constructs a hierarchical file tree structure from a list of file paths and sorts it.\",\n  \"type\": \"utility module\",\n  \"functions\": [\n    {\n      \"name\": \"buildFileTree\",\n      \"purpose\": \"Builds a nested file tree structure from an array of file objects.\",\n      \"input\": \"Array of file objects with 'path' and 'type' properties.\",\n      \"output\": \"Hierarchical object representing the file tree.\"\n    },\n    {\n      \"name\": \"sortFileTree\",\n      \"purpose\": \"Sorts the file tree structure by directories first and then alphabetically.\",\n      \"input\": \"A node of the file tree.\",\n      \"output\": \"Sorted file tree node.\"\n    }\n  ],\n  \"exports\": [\"buildFileTree\"],\n  \"dependencies\": [],\n  \"finalReturnType(s)\": \"Object representing a sorted hierarchical file tree.\"\n}"
    },
    {
      "path": "backend/src/utils/github.js",
      "metadata": "{\n  \"name\": \"github.js\",\n  \"path\": \"backend/src/utils/github.js\",\n  \"imports\": [],\n  \"mainPurpose\": \"Parses a GitHub repository URL and extracts the owner and repository name.\",\n  \"type\": \"utility module\",\n  \"functions\": [\n    {\n      \"name\": \"parseGitHubUrl\",\n      \"purpose\": \"Extracts the owner and repository name from a GitHub repository URL.\",\n      \"input\": \"A string representing a GitHub repository URL.\",\n      \"output\": \"An object containing 'owner' and 'repo' properties.\"\n    }\n  ],\n  \"exports\": [\"parseGitHubUrl\"],\n  \"dependencies\": [\"URL (built-in Node.js API)\"],\n  \"finalReturnType(s)\": \"Object\"\n}"
    },
    {
      "path": "frontend/eslint.config.js",
      "metadata": "{\n  \"name\": \"eslint.config.js\",\n  \"path\": \"frontend/eslint.config.js\",\n  \"imports\": [\n    \"@eslint/js\",\n    \"globals\",\n    \"eslint-plugin-react\",\n    \"eslint-plugin-react-hooks\",\n    \"eslint-plugin-react-refresh\"\n  ],\n  \"mainPurpose\": \"Configures ESLint rules and plugins for the frontend React project.\",\n  \"type\": \"ESLint Configuration\",\n  \"functions\": [],\n  \"exports\": [\n    \"ESLint configuration array\"\n  ],\n  \"dependencies\": [\n    \"@eslint/js\",\n    \"globals\",\n    \"eslint-plugin-react\",\n    \"eslint-plugin-react-hooks\",\n    \"eslint-plugin-react-refresh\"\n  ],\n  \"finalReturnType(s)\": \"Array\"\n}"
    },
    {
      "path": "frontend/index.html",
      "metadata": "{\n  \"name\": \"index.html\",\n  \"path\": \"frontend/index.html\",\n  \"imports\": [\"/src/main.jsx\"],\n  \"mainPurpose\": \"Entry point for the frontend application, setting up the root container and linking the main JavaScript file.\",\n  \"type\": \"HTML\",\n  \"functions\": [],\n  \"exports\": [],\n  \"dependencies\": [],\n  \"finalReturnType(s)\": \"HTML Document\"\n}"
    },
    {
      "path": "frontend/src/App.jsx",
      "metadata": "{\n  \"name\": \"App\",\n  \"path\": \"frontend/src/App.jsx\",\n  \"imports\": [\n    {\n      \"module\": \"react\",\n      \"imports\": [\"useState\"]\n    },\n    {\n      \"module\": \"./App.css\",\n      \"imports\": []\n    }\n  ],\n  \"mainPurpose\": \"Renders a UI for analyzing GitHub repositories using API tokens and displays progress logs.\",\n  \"type\": \"React Functional Component\",\n  \"functions\": [\n    {\n      \"name\": \"handleSubmit\",\n      \"purpose\": \"Handles form submission, sends repository data to the backend for analysis, and processes streamed logs.\",\n      \"input\": \"Event object (e)\",\n      \"output\": \"None (updates state variables)\"\n    },\n    {\n      \"name\": \"handleDownload\",\n      \"purpose\": \"Triggers a download of the analysis results from the backend.\",\n      \"input\": \"None\",\n      \"output\": \"None (initiates file download)\"\n    }\n  ],\n  \"exports\": [\"App\"],\n  \"dependencies\": [\"react\", \"fetch API\"],\n  \"finalReturnType(s)\": \"JSX (React component rendering UI)\"\n}"
    },
    {
      "path": "frontend/src/main.jsx",
      "metadata": "{\n  \"name\": \"main.jsx\",\n  \"path\": \"frontend/src/main.jsx\",\n  \"imports\": [\n    {\n      \"module\": \"react\",\n      \"imports\": [\"StrictMode\"]\n    },\n    {\n      \"module\": \"react-dom/client\",\n      \"imports\": [\"createRoot\"]\n    },\n    {\n      \"module\": \"./index.css\",\n      \"imports\": []\n    },\n    {\n      \"module\": \"./App.jsx\",\n      \"imports\": [\"App\"]\n    }\n  ],\n  \"mainPurpose\": \"Entry point for the React application, rendering the root component into the DOM.\",\n  \"type\": \"React Application Entry File\",\n  \"functions\": [],\n  \"exports\": [],\n  \"dependencies\": [\"react\", \"react-dom\"],\n  \"finalReturnType(s)\": \"React Component Render\"\n}"
    },
    {
      "path": "frontend/vite.config.js",
      "metadata": "{\n  \"name\": \"vite.config.js\",\n  \"path\": \"frontend/vite.config.js\",\n  \"imports\": [\"vite\", \"@vitejs/plugin-react\"],\n  \"mainPurpose\": \"Configuration file for Vite, specifying plugins and settings for the frontend build process.\",\n  \"type\": \"Configuration\",\n  \"functions\": [\n    {\n      \"name\": \"defineConfig\",\n      \"purpose\": \"Defines and exports the Vite configuration.\",\n      \"input\": \"Configuration object\",\n      \"output\": \"Vite configuration object\"\n    }\n  ],\n  \"exports\": [\"default\"],\n  \"dependencies\": [\"vite\", \"@vitejs/plugin-react\"],\n  \"finalReturnType(s)\": \"Vite configuration object\"\n}"
    }
  ],
  "callHierarchy": ""
}